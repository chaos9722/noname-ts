interface ui {
    updates:[],
    thrown:[],
    touchlines:[],
    todiscard:{},
    refresh:function(node){
        void window.getComputedStyle(node, null).getPropertyValue("opacity");
    },
    create:{
        div:function(){
            var str,innerHTML,position,position2,style,divposition,listen;
            for(var i=0;i<arguments.length;i++){
                if(typeof arguments[i]=='string'){
                    if(typeof str=='string'){
                        innerHTML=arguments[i];
                    }
                    else{
                        str=arguments[i];
                    }
                }
                else if(get.objtype(arguments[i])=='div'||
                    get.objtype(arguments[i])=='table'||
                    get.objtype(arguments[i])=='tr'||
                    get.objtype(arguments[i])=='td'||
                    get.objtype(arguments[i])=='body') position=arguments[i];
                else if(typeof arguments[i]=='number') position2=arguments[i];
                else if(get.itemtype(arguments[i])=='divposition') divposition=arguments[i];
                else if(typeof arguments[i]=='object') style=arguments[i];
                else if(typeof arguments[i]=='function') listen=arguments[i];
            }
            if(str==undefined) str='';
            var node=document.createElement('div');
            for(var i=0;i<str.length;i++){
                if(str[i]=='.'){
                    if(node.className.length!=0){
                        node.className+=' ';
                    }
                    while(str[i+1]!='.'&&str[i+1]!='#'&&i+1<str.length){
                        node.className+=str[i+1];
                        i++;
                    }
                }
                else if(str[i]=='#'){
                    while(str[i+1]!='.'&&str[i+1]!='#'&&i+1<str.length){
                        node.id+=str[i+1];
                        i++;
                    }
                }
            }
            if(position){
                if(typeof position2=='number'&&position.childNodes.length>position2){
                    position.insertBefore(node,position.childNodes[position2]);
                }
                else{
                    position.appendChild(node);
                }
            }
            if(style) node.css(style);
            if(divposition) node.setPosition(divposition);
            if(innerHTML) node.innerHTML=innerHTML;
            if(listen) node.listen(listen);
            return node;
        },
        filediv:function(){
            var args=Array.from(arguments);
            var func=null;
            for(var i=0;i<args.length;i++){
                if(typeof args[i]=='function'){
                    func=args[i];
                    args.splice(i,1);
                    break;
                }
            }
            var div=ui.create.div.apply(this,args);
            var input=ui.create.node('input.fileinput');
            input.type='file';
            input.onchange=function(e){
                func.call(this,this.files[0],e);
            };
            div.appendChild(input);
            div.inputNode=input;
            return div;
        },
        node:function(){
            var tagName,str,innerHTML,position,position2,style,divposition,listen;
            for(var i=0;i<arguments.length;i++){
                if(typeof arguments[i]=='string'){
                    if(typeof tagName=='string'){
                        innerHTML=arguments[i];
                    }
                    else{
                        tagName=arguments[i];
                    }
                }
                else if(get.objtype(arguments[i])=='div'||
                    get.objtype(arguments[i])=='table'||
                    get.objtype(arguments[i])=='tr'||
                    get.objtype(arguments[i])=='td'||
                    get.objtype(arguments[i])=='body') position=arguments[i];
                else if(typeof arguments[i]=='number') position2=arguments[i];
                else if(get.itemtype(arguments[i])=='divposition') divposition=arguments[i];
                else if(typeof arguments[i]=='object') style=arguments[i];
                else if(typeof arguments[i]=='function') listen=arguments[i];
            }
            if(tagName==undefined){
                tagName='div';
            }
            else{
                var i1=tagName.indexOf('.');
                var i2=tagName.indexOf('#');
                if(i1!=-1||i2!=-1){
                    if(i2!=-1&&i2<i1){
                        i1=i2;
                    }
                    str=tagName.slice(i1);
                    tagName=tagName.slice(0,i1);
                }
            }
            var node=document.createElement(tagName);
            if(str){
                for(var i=0;i<str.length;i++){
                    if(str[i]=='.'){
                        if(node.className.length!=0){
                            node.className+=' ';
                        }
                        while(str[i+1]!='.'&&str[i+1]!='#'&&i+1<str.length){
                            node.className+=str[i+1];
                            i++;
                        }
                    }
                    else if(str[i]=='#'){
                        while(str[i+1]!='.'&&str[i+1]!='#'&&i+1<str.length){
                            node.id+=str[i+1];
                            i++;
                        }
                    }
                }
            }
            if(position){
                if(typeof position2=='number'&&position.childNodes.length>position2){
                    position.insertBefore(node,position.childNodes[position2]);
                }
                else{
                    position.appendChild(node);
                }
            }
            if(style) HTMLDivElement.prototype.css.call(node,style);
            if(divposition) HTMLDivElement.prototype.setPosition.call(node,divposition);
            if(innerHTML) node.innerHTML=innerHTML;
            if(listen) node.onclick=listen;
            return node;
        },
        iframe:function(src){
            var layer=document.createElement('div');
            layer.classList.add('poplayer');
            layer.style.zIndex='100';
            layer.listen(function(){
                this.remove();
            });
            layer.style.background='white';

            var webview=document.createElement('iframe');
            webview.src=src;
            webview.style.width='100%';
            webview.style.height='100%';
            webview.style.left='0px';
            webview.style.top='0px';
            webview.style.position='absolute';
            webview.style.border='none';
            layer.appendChild(webview);

            var backbutton=ui.create.div('.menubutton.round','返',layer,function(){
                layer.remove();
            });
            backbutton.style.bottom='10px';
            backbutton.style.right='10px';
            backbutton.style.background='rgba(0,0,0,0.4)';
            backbutton.style.color='white';
            backbutton.style.textShadow='rgba(0,0,0,0.5) 0px 0px 2px';
            backbutton.style.boxShadow='rgba(0, 0, 0, 0.3) 0 0 0 1px, rgba(0, 0, 0, 0.3) 0 3px 10px';
            backbutton.style.position='fixed';

            ui.window.appendChild(layer);
        },
        identitycircle:function(list,target){
            var container=ui.create.div('.identitycircle.menubg',target);
            var circle=ui.create.div(container);
            container.dataset.num=list.length;
            for(var i=0;i<list.length;i++){
                var sec1=ui.create.div(circle);
                sec1.dataset.color=list[i];
                var sec2=ui.create.div(circle);
                sec2.dataset.color=list[i];
                var deg1=360/list.length*i;
                var deg2=0;
                if(list.length==2){
                    deg2=90;
                }
                else if(list.length==3){
                    deg2=30;
                }
                sec1.style.transform='rotate('+deg1+'deg)';
                sec2.style.transform='rotate('+(deg1+deg2)+'deg)';
            }
        },
        chat:function(){
            var chat=ui.create.system('聊天',null,true);
            ui.chatButton=chat;
            lib.setPopped(chat,ui.click.chat,220);
        },
        exit:function(){
            if(!ui.exit){
                ui.exit=ui.create.control('退出房间',ui.click.exit);
            }
        },
        connecting:function(bool){
            if(bool){
                ui.window.classList.remove('connecting');
                if(ui.connecting){
                    ui.connecting.delete();
                    delete ui.connecting;
                }
            }
            else{
                ui.window.classList.add('connecting');
                ui.connecting=ui.create.div('.fullsize.connectlayer');
                document.body.appendChild(ui.connecting);
                ui.create.div('','正在重连...',ui.connecting);
                ui.connecting.splashtimeout=setTimeout(function(){
                    if(ui.connecting){
                        delete ui.connecting.splashtimeout;
                    }
                },300);
                // setTimeout(function(){
                // 	if(ui.connecting){
                // 		ui.connecting.firstChild.show();
                // 	}
                // },1000);
            }
        },
        roomInfo:function(){
            var chat=ui.create.system(game.online?'房间信息':'房间设置',function(){
                if(!game.online||game.onlinezhu){
                    ui.click.connectMenu();
                }
            },true);
            ui.roomInfo=chat;
            lib.setPopped(chat,function(){
                if(game.getRoomInfo){
                    var uiintro=ui.create.dialog('hidden');
                    game.getRoomInfo(uiintro);
                    return uiintro;
                }
            },180);
        },
        templayer:function(time){
            if(typeof time!='number'||isNaN(time)||time==Infinity){
                time=500;
            }
            var templayer=ui.create.div('.popup-container',ui.window);
            setTimeout(function(){
                templayer.remove();
            },time);
        },
        selectlist:function(list,init,position,onchange){
            var select=document.createElement('select');
            for(var i=0;i<list.length;i++){
                var option=document.createElement('option');
                if(Array.isArray(list[i])){
                    option.value=list[i][0];
                    option.innerHTML=list[i][1];
                }
                else{
                    option.value=list[i];
                    option.innerHTML=list[i];
                }
                if(init==option.value){
                    option.selected='selected';
                }
                select.appendChild(option);
            }
            if(position){
                position.appendChild(select);
            }
            if(onchange){
                select.onchange=onchange;
            }
            return select;
        },
        menu(connectMenu):any;
        table:function(){
            var str,row,col,position,position2,fixed,style,divposition;
            for(var i=0;i<arguments.length;i++){
                if(typeof arguments[i]=='string') str=arguments[i];
                else if(typeof arguments[i]=='number'){
                    if(typeof row=='number'){
                        if(typeof col=='number') position2=arguments[i];
                        else col=arguments[i];
                    }
                    else row=arguments[i];
                }
                else if(get.objtype(arguments[i])=='div'||
                    get.objtype(arguments[i])=='table'||
                    get.objtype(arguments[i])=='tr'||
                    get.objtype(arguments[i])=='td'||
                    get.objtype(arguments[i])=='body') position=arguments[i];
                else if(typeof arguments[i]=='boolean') fixed=arguments[i];
                else if(get.itemtype(arguments[i])=='divposition') divposition=arguments[i];
                else if(typeof arguments[i]=='object') style=arguments[i];
            }
            if(str==undefined) str='';
            var node=document.createElement('table');
            for(var i=0;i<str.length;i++){
                if(str[i]=='.'){
                    if(node.className.length!=0){
                        node.className+=' ';
                    }
                    while(str[i+1]!='.'&&str[i+1]!='#'&&i+1<str.length){
                        node.className+=str[i+1];
                        i++;
                    }
                }
                else if(str[i]=='#'){
                    while(str[i+1]!='.'&&str[i+1]!='#'&&i+1<str.length){
                        node.id+=str[i+1];
                        i++;
                    }
                }
            }
            var tr,td;
            for(var i=0;i<row;i++){
                tr=document.createElement('tr');
                if(fixed) tr.style.height=(100/row)+'%';
                node.appendChild(tr);
                for(var j=0;j<col;j++){
                    td=document.createElement('td');
                    tr.appendChild(td);
                }
            }
            if(position){
                if(typeof position2=='number'&&position.childNodes.length>position2){
                    position.insertBefore(node,position.childNodes[position2]);
                }
                else{
                    position.appendChild(node);
                }
            }
            return node;
        },
        giveup:function(){
            if(ui.giveup) return;
            if(!lib.config.show_giveup) return;
            ui.giveup=ui.create.system('投降',function(){
                var player=game.me;
                this.remove();
                if(game.online){
                    game.send('giveup',player);
                }
                else{
                    _status.event.next.length=0;
                    game.createEvent('giveup',false).setContent(function(){
                        game.log(player,'投降');
                        player.popup('投降');
                        player.die('nosource');
                    }).player=player;
                }
                if(_status.paused&&_status.imchoosing&&!_status.auto){
                    ui.click.auto();
                }
            },true);
        },
        groupControl:function(dialog){
            return ui.create.control('wei','shu','wu','qun','western',function(link,node){
                if(link=='全部'){
                    dialog.currentcapt='';
                    dialog.currentgroup='';
                    for(var i=0;i<dialog.buttons.length;i++){
                        dialog.buttons[i].style.display='';
                    }
                }
                else{
                    if(node.classList.contains('thundertext')){
                        dialog.currentgroup=null;
                        dialog.currentgroupnode=null;
                        node.classList.remove('thundertext');
                        for(var i=0;i<dialog.buttons.length;i++){
                            if(dialog.currentcapt&&dialog.buttons[i].capt!=dialog.getCurrentCapt(dialog.buttons[i].link,dialog.buttons[i].capt)){
                                dialog.buttons[i].classList.add('nodisplay');
                            }
                            else{
                                dialog.buttons[i].classList.remove('nodisplay');
                            }
                        }
                    }
                    else{
                        if(dialog.currentgroupnode){
                            dialog.currentgroupnode.classList.remove('thundertext');
                        }
                        dialog.currentgroup=link;
                        dialog.currentgroupnode=node;
                        node.classList.add('thundertext');
                        for(var i=0;i<dialog.buttons.length;i++){
                            if(dialog.buttons[i].group!=link||
                            (dialog.currentcapt&&dialog.buttons[i].capt!=dialog.getCurrentCapt(dialog.buttons[i].link,dialog.buttons[i].capt))){
                                dialog.buttons[i].classList.add('nodisplay');
                            }
                            else{
                                dialog.buttons[i].classList.remove('nodisplay');
                            }
                        }
                    }
                }
            });
        },
        cardDialog:function(){
            var args=['thisiscard'];
            for(var i=0;i<arguments.length;i++){
                args.push(arguments[i]);
            }
            return ui.create.characterDialog.apply(this,args);
        },
        characterDialog2:function(filter){
            var list=[];
            for(var i in lib.character){
                if(lib.character[i][4].contains('minskin')) continue;
                if(lib.character[i][4].contains('boss')||lib.character[i][4].contains('hiddenboss')){
                    if(lib.config.mode=='boss') continue;
                    if(!lib.character[i][4].contains('bossallowed')) continue;
                }

                if(lib.character[i][4].contains('stonehidden')) continue;
                if(lib.config.banned.contains(i)) continue;
                if(filter&&filter(i)) continue;
                list.push(i);
            }
            var dialog=ui.create.dialog('hidden');
            dialog.classList.add('noupdate');
            dialog.classList.add('scroll1');
            dialog.classList.add('scroll2');
            dialog.classList.add('scroll3');
            list.sort(lib.sort.character);
            dialog.classList.add('character');
            dialog.classList.add('choose-character');
            var getPack=function(name){
                for(var i in lib.characterPack){
                    if(lib.characterPack[i][name]) return i;
                }
                return null;
            }
            var packs={};
            var packnode=ui.create.div('.packnode',dialog);
            lib.setScroll(packnode);
            var clickCapt=function(){
                var active=this.parentNode.querySelector('.active');
                if(active){
                    active.classList.remove('active');
                }
                this.classList.add('active');
                for(var i=0;i<dialog.buttons.length;i++){
                    if(this.pack&&!this.pack.contains(dialog.buttons[i].link)){
                        dialog.buttons[i].classList.add('nodisplay');
                    }
                    else{
                        dialog.buttons[i].classList.remove('nodisplay');
                    }
                }
            }
            var createNode=function(packname){
                var translate;
                var pack=null;
                if(packname=='最近'){
                    pack=get.config('recentCharacter')||[];
                }
                else if(packname=='收藏'){
                    pack=lib.config.favouriteCharacter;
                }
                var node=ui.create.div('.dialogbutton.menubutton.large',packname,packnode,clickCapt);
                node.pack=pack;
                return node;
            }
            dialog.add([list,'character']);
            var bool=true;
            var node;
            var recent=get.config('recentCharacter');
            if(recent&&recent.length){
                node=createNode('最近');
                if(lib.config.character_dialog_tool=='最近'){
                    clickCapt.call(node);
                    bool=false;
                }
            }
            if(lib.config.favouriteCharacter.length){
                node=createNode('收藏');
                if(lib.config.character_dialog_tool=='收藏'){
                    clickCapt.call(node);
                    bool=false;
                }
            }
            var node=createNode('全部');
            if(lib.config.character_dialog_tool=='all'){
                clickCapt.call(node);
                bool=false;
            }
            if(bool){
                clickCapt.call(packnode.firstChild);
            }

            var node=ui.create.div('.dialogbutton.menubutton.large','筛选',packnode);
            return dialog;
        },
        characterDialog:function(){
            // if(lib.config.character_dialog_style=='newstyle'){
            //     for(var i=0;i<arguments.length;i++){
            //         if(arguments[i]=='thisiscard'){
            //             break;
            //         }
            //     }
            //     if(i==arguments.length){
            //         return ui.create.characterDialog2.apply(this,arguments);
            //     }
            // }
            var filter,str,noclick,thisiscard,seperate,expandall,onlypack,heightset,precharacter;
            for(var i=0;i<arguments.length;i++){
                if(arguments[i]==='thisiscard'){
                    thisiscard=true;
                }
                else if(arguments[i]==='expandall'){
                    expandall=true;
                }
                else if(arguments[i]==='heightset'){
                    heightset=true;
                }
                else if(arguments[i]=='precharacter'){
                    precharacter=true;
                }
                else if(typeof arguments[i]=='string'&&arguments[i].indexOf('onlypack:')==0){
                    onlypack=arguments[i].slice(9);
                }
                else if(typeof arguments[i]=='object'&&typeof arguments[i].seperate=='function'){
                    seperate=arguments[i].seperate;
                }
                else if(typeof arguments[i]==='string'){
                    str=arguments[i];
                }
                else if(typeof arguments[i]==='function'){
                    filter=arguments[i];
                }
                else if(typeof arguments[i]=='boolean'){
                    noclick=arguments[i];
                }
            }
            var list=[];
            var dialog;
            var node=ui.create.div('.caption.pointerspan');
            if(get.is.phoneLayout()){
                node.style.fontSize='30px';
            }
            var namecapt=[];
            var getCapt=function(str){
                var capt;
                if(str.indexOf('_')==-1){
                    capt=str[0];
                }
                else{
                    capt=str[str.lastIndexOf('_')+1];
                }
                capt=capt.toLowerCase();
                if(!/[a-z]/i.test(capt)){
                    capt='自定义';
                }
                return capt;
            }
            if(thisiscard){
                for(var i in lib.card){
                    if(!lib.translate[i+'_info']) continue;
                    if(filter&&filter(i)) continue;
                    list.push(['',get.translation(lib.card[i].type),i]);
                    if(namecapt.indexOf(getCapt(i))==-1){
                        namecapt.push(getCapt(i));
                    }
                }
            }
            else{
                for(var i in lib.character){
                    if(lib.character[i][4].contains('minskin')) continue;
                    if(lib.character[i][4].contains('boss')||lib.character[i][4].contains('hiddenboss')){
                        if(lib.config.mode=='boss') continue;
                        if(!lib.character[i][4].contains('bossallowed')) continue;
                    }

                    if(lib.character[i][4].contains('stonehidden')) continue;
                    if(lib.character[i][4].contains('unseen')) continue;
                    if(lib.config.banned.contains(i)) continue;
                    if(lib.characterFilter[i]&&!lib.characterFilter[i](get.mode())) continue;
                    if(filter&&filter(i)) continue;
                    list.push(i);
                    if(namecapt.indexOf(getCapt(i))==-1){
                        namecapt.push(getCapt(i));
                    }
                }
            }
            namecapt.sort(function(a,b){
                return a>b?1:-1;
            });
            if(!thisiscard){
                namecapt.remove('自定义');
                namecapt.push('newline');
                for(var i in lib.characterDialogGroup){
                    namecapt.push(i);
                }
            }
            var newlined=false;
            var newlined2;
            var packsource;
            var clickCapt=function(e){
                if(_status.dragged) return;
                if(dialog.currentcapt2=='最近'&&dialog.currentcaptnode2!=this&&!dialog.currentcaptnode2.inited){
                    dialog.currentcapt2=null;
                    dialog.currentcaptnode2.classList.remove('thundertext');
                    dialog.currentcaptnode2.inited=true;
                    dialog.currentcaptnode2=null;
                }
                if(this.alphabet){
                    if(this.classList.contains('thundertext')){
                        dialog.currentcapt=null;
                        dialog.currentcaptnode=null;
                        this.classList.remove('thundertext');
                        if(this.touchlink){
                            this.touchlink.classList.remove('active');
                        }
                        for(var i=0;i<dialog.buttons.length;i++){
                            if(dialog.currentgroup&&dialog.buttons[i].group!=dialog.currentgroup){
                                dialog.buttons[i].classList.add('nodisplay');
                            }
                            else if(dialog.currentcapt2&&dialog.buttons[i].capt!=dialog.getCurrentCapt(dialog.buttons[i].link,dialog.buttons[i].capt,true)){
                                dialog.buttons[i].classList.add('nodisplay');
                            }
                            else{
                                dialog.buttons[i].classList.remove('nodisplay');
                            }
                        }
                    }
                    else{
                        if(dialog.currentcaptnode){
                            dialog.currentcaptnode.classList.remove('thundertext');
                            if(dialog.currentcaptnode.touchlink){
                                dialog.currentcaptnode.touchlink.classList.remove('active');
                            }
                        }
                        dialog.currentcapt=this.link;
                        dialog.currentcaptnode=this;
                        this.classList.add('thundertext');
                        if(this.touchlink){
                            this.touchlink.classList.add('active');
                        }
                        for(var i=0;i<dialog.buttons.length;i++){
                            if(dialog.buttons[i].capt!=dialog.getCurrentCapt(dialog.buttons[i].link,dialog.buttons[i].capt)){
                                dialog.buttons[i].classList.add('nodisplay');
                            }
                            else if(dialog.currentcapt2&&dialog.buttons[i].capt!=dialog.getCurrentCapt(dialog.buttons[i].link,dialog.buttons[i].capt,true)){
                                dialog.buttons[i].classList.add('nodisplay');
                            }
                            else if(dialog.currentgroup&&dialog.buttons[i].group!=dialog.currentgroup){
                                dialog.buttons[i].classList.add('nodisplay');
                            }
                            else{
                                dialog.buttons[i].classList.remove('nodisplay');
                            }
                        }
                    }
                }
                else{
                    if(newlined2){
                        newlined2.style.display='none';
                        if(!packsource.onlypack){
                            packsource.classList.remove('thundertext');
                            if(!get.is.phoneLayout()||!lib.config.filternode_button){
                                packsource.innerHTML='武将包';
                            }
                        }
                    }
                    if(this.classList.contains('thundertext')){
                        dialog.currentcapt2=null;
                        dialog.currentcaptnode2=null;
                        this.classList.remove('thundertext');
                        if(this.touchlink){
                            this.touchlink.classList.remove('active');
                        }
                        for(var i=0;i<dialog.buttons.length;i++){
                            if(dialog.currentgroup&&dialog.buttons[i].group!=dialog.currentgroup){
                                dialog.buttons[i].classList.add('nodisplay');
                            }
                            else if(dialog.currentcapt&&dialog.buttons[i].capt!=dialog.getCurrentCapt(dialog.buttons[i].link,dialog.buttons[i].capt)){
                                dialog.buttons[i].classList.add('nodisplay');
                            }
                            else{
                                dialog.buttons[i].classList.remove('nodisplay');
                            }
                        }
                    }
                    else{
                        if(dialog.currentcaptnode2){
                            dialog.currentcaptnode2.classList.remove('thundertext');
                            if(dialog.currentcaptnode2.touchlink){
                                dialog.currentcaptnode2.touchlink.classList.remove('active');
                            }
                        }
                        dialog.currentcapt2=this.link;
                        dialog.currentcaptnode2=this;
                        this.classList.add('thundertext');
                        if(this.touchlink){
                            this.touchlink.classList.add('active');
                        }
                        else if(this.parentNode==newlined2){
                            packsource.innerHTML=this.innerHTML;
                            packsource.classList.add('thundertext');
                        }
                        for(var i=0;i<dialog.buttons.length;i++){
                            if(dialog.currentcapt&&dialog.buttons[i].capt!=dialog.getCurrentCapt(dialog.buttons[i].link,dialog.buttons[i].capt)){
                                dialog.buttons[i].classList.add('nodisplay');
                            }
                            else if(dialog.buttons[i].capt!=dialog.getCurrentCapt(dialog.buttons[i].link,dialog.buttons[i].capt,true)){
                                dialog.buttons[i].classList.add('nodisplay');
                            }
                            else if(dialog.currentgroup&&dialog.buttons[i].group!=dialog.currentgroup){
                                dialog.buttons[i].classList.add('nodisplay');
                            }
                            else{
                                if(dialog.buttons[i].activate){
                                    dialog.buttons[i].activate();
                                }
                                dialog.buttons[i].classList.remove('nodisplay');
                            }
                        }
                    }
                }
                if(dialog.seperate){
                    for(var i=0;i<dialog.seperate.length;i++){
                        if(!dialog.seperate[i].nextSibling.querySelector('.button:not(.nodisplay)')){
                            dialog.seperate[i].style.display='none';
                            dialog.seperate[i].nextSibling.style.display='none';
                        }
                        else{
                            dialog.seperate[i].style.display='';
                            dialog.seperate[i].nextSibling.style.display='';
                        }
                    }
                }
                if(filternode){
                    if(filternode.querySelector('.active')){
                        packsource.classList.add('thundertext');
                    }
                    else{
                        packsource.classList.remove('thundertext');
                    }
                }
                if(e) e.stopPropagation();
            };
            for(i=0;i<namecapt.length;i++){
                if(namecapt[i]=='newline'){
                    newlined=document.createElement('div');
                    newlined.style.marginTop='5px';
                    newlined.style.display='block';
                    // newlined.style.fontFamily='xinwei';
                    if(get.is.phoneLayout()){
                        newlined.style.fontSize='32px';
                    }
                    else{
                        newlined.style.fontSize='22px';
                    }
                    newlined.style.textAlign='center';
                    node.appendChild(newlined);
                }
                else if(newlined){
                    var span=ui.create.div('.tdnode.pointerdiv.shadowed.reduce_radius');
                    span.style.margin='3px';
                    span.style.width='auto';
                    span.innerHTML=' '+namecapt[i].toUpperCase()+' ';
                    span.link=namecapt[i];
                    span.addEventListener(lib.config.touchscreen?'touchend':'click',clickCapt);
                    newlined.appendChild(span);
                    node[namecapt[i]]=span;
                    if(namecapt[i]=='收藏'){
                        span._nature='fire';
                    }
                    else{
                        span._nature='wood';
                    }
                }
                else{
                    var span=document.createElement('span');
                    span.innerHTML=' '+namecapt[i].toUpperCase()+' ';
                    span.link=namecapt[i];
                    span.alphabet=true;
                    span.addEventListener(lib.config.touchscreen?'touchend':'click',clickCapt);
                    node.appendChild(span);
                }
            }
            if(!thisiscard){
                var groups=['wei','shu','wu','qun'];
                var bool1=false;
                var bool2=false;
                for(var i in lib.character){
                    if(lib.character[i][1]=='shen'){
                        bool1=true;
                    }
                    if(get.mode()=='guozhan'||lib.character[i][1]=='western'){
                        bool2=true;
                    }
                    if(bool1&&bool2) break;
                }
                if(bool1) groups.add('shen');
                if(bool2&&get.mode()!='guozhan') groups.add('western');
                var natures=['water','soil','wood','metal'];
                var span=document.createElement('span');
                newlined.appendChild(span);
                span.style.margin='8px';
                var clickGroup=function(){
                    if(_status.dragged) return;
                    if(dialog.currentcapt2=='最近'&&dialog.currentcaptnode2!=this&&!dialog.currentcaptnode2.inited){
                        dialog.currentcapt2=null;
                        dialog.currentcaptnode2.classList.remove('thundertext');
                        dialog.currentcaptnode2.inited=true;
                        dialog.currentcaptnode2=null;
                    }
                    var node=this,link=this.link;
                    if(node.classList.contains('thundertext')){
                        dialog.currentgroup=null;
                        dialog.currentgroupnode=null;
                        node.classList.remove('thundertext');
                        for(var i=0;i<dialog.buttons.length;i++){
                            if(dialog.currentcapt&&dialog.buttons[i].capt!=dialog.getCurrentCapt(dialog.buttons[i].link,dialog.buttons[i].capt)){
                                dialog.buttons[i].classList.add('nodisplay');
                            }
                            else if(dialog.currentcapt2&&dialog.buttons[i].capt!=dialog.getCurrentCapt(dialog.buttons[i].link,dialog.buttons[i].capt,true)){
                                dialog.buttons[i].classList.add('nodisplay');
                            }
                            else{
                                dialog.buttons[i].classList.remove('nodisplay');
                            }
                        }
                    }
                    else{
                        if(dialog.currentgroupnode){
                            dialog.currentgroupnode.classList.remove('thundertext');
                        }
                        dialog.currentgroup=link;
                        dialog.currentgroupnode=node;
                        node.classList.add('thundertext');
                        for(var i=0;i<dialog.buttons.length;i++){
                            if(dialog.currentcapt&&dialog.buttons[i].capt!=dialog.getCurrentCapt(dialog.buttons[i].link,dialog.buttons[i].capt)){
                                dialog.buttons[i].classList.add('nodisplay');
                            }
                            else if(dialog.currentcapt2&&dialog.buttons[i].capt!=dialog.getCurrentCapt(dialog.buttons[i].link,dialog.buttons[i].capt,true)){
                                dialog.buttons[i].classList.add('nodisplay');
                            }
                            else if(dialog.buttons[i].group!=dialog.currentgroup){
                                dialog.buttons[i].classList.add('nodisplay');
                            }
                            else{
                                dialog.buttons[i].classList.remove('nodisplay');
                            }
                        }
                    }
                };
                for(var i=0;i<groups.length;i++){
                    var span=ui.create.div('.tdnode.pointerdiv.shadowed.reduce_radius.reduce_margin');
                    span.style.margin='3px';
                    newlined.appendChild(span);
                    span.innerHTML=get.translation(groups[i]);
                    span.link=groups[i];
                    span._nature=natures[i];
                    span.addEventListener(lib.config.touchscreen?'touchend':'click',clickGroup);
                }

                var span=document.createElement('span');
                newlined.appendChild(span);
                span.style.margin='8px';

                packsource=ui.create.div('.tdnode.pointerdiv.shadowed.reduce_radius.reduce_margin');
                packsource.style.margin='3px';
                newlined.appendChild(packsource);
                var filternode=null;
                var clickCaptNode=function(e){
                    delete _status.filterCharacter;
                    ui.window.classList.remove('shortcutpaused');
                    filternode.delete();
                    filternode.classList.remove('shown');
                    clickCapt.call(this.link,e);
                };
                if(get.is.phoneLayout()&&lib.config.filternode_button){
                    newlined.style.marginTop='';
                    packsource.innerHTML='筛选';
                    filternode=ui.create.div('.popup-container.filter-character.modenopause');
                    ui.create.div(filternode);
                    filternode.listen(function(e){
                        if(this.classList.contains('removing')) return;
                        delete _status.filterCharacter;
                        ui.window.classList.remove('shortcutpaused');
                        this.delete();
                        this.classList.remove('shown');
                        e.stopPropagation();
                    });
                    for(var i=0;i<node.childElementCount;i++){
                        if(node.childNodes[i].tagName.toLowerCase()=='span'){
                            node.childNodes[i].style.display='none';
                            node.childNodes[i].touchlink=ui.create.div(filternode.firstChild,clickCaptNode,'.menubutton.large.capt',node.childNodes[i].innerHTML);
                            node.childNodes[i].touchlink.link=node.childNodes[i];
                        }
                    }
                    ui.create.node('br',filternode.firstChild);
                }
                else{
                    if(onlypack){
                        packsource.onlypack=true;
                        packsource.innerHTML=get.translation(onlypack+'_character_config');
                        packsource.style.display='none';
                        packsource.previousSibling.style.display='none';
                    }
                    else{
                        packsource.innerHTML='武将包';
                    }
                }

                newlined2=document.createElement('div');
                newlined2.style.marginTop='5px';
                newlined2.style.display='none';
                newlined2.style.fontFamily='xinwei';
                newlined2.classList.add('pointernode');
                if(get.is.phoneLayout()){
                    newlined2.style.fontSize='32px';
                }
                else{
                    newlined2.style.fontSize='22px';
                }
                newlined2.style.textAlign='center';
                node.appendChild(newlined2);

                packsource.addEventListener(lib.config.touchscreen?'touchend':'click',function(){
                    if(packsource.onlypack) return;
                    if(_status.dragged) return;
                    if(get.is.phoneLayout()&&lib.config.filternode_button&&filternode){
                        _status.filterCharacter=true;
                        ui.window.classList.add('shortcutpaused');
                        ui.window.appendChild(filternode);
                        ui.refresh(filternode);
                        filternode.classList.add('shown');
                        var dh=filternode.offsetHeight-filternode.firstChild.offsetHeight;
                        if(dh>0){
                            filternode.firstChild.style.top=(dh/2)+'px';
                        }
                        else{
                            filternode.firstChild.style.top='';
                        }
                    }
                    else{
                        if(newlined2.style.display=='none'){
                            newlined2.style.display='block';
                        }
                        else{
                            newlined2.style.display='none';
                        }
                    }
                });
                var packlist=[];
                for(var i=0;i<lib.config.all.characters.length;i++){
                    if(!lib.config.characters.contains(lib.config.all.characters[i])) continue;
                    packlist.push(lib.config.all.characters[i]);
                }
                for(var i in lib.characterPack){
                    if(!lib.config.all.characters.contains(i)){
                        packlist.push(i);
                    }
                }
                for(var i=0;i<packlist.length;i++){
                    var span=document.createElement('div');
                    span.style.display='inline-block';
                    span.style.width='auto';
                    span.style.margin='5px';
                    if(get.is.phoneLayout()){
                        span.style.fontSize='32px';
                    }
                    else{
                        span.style.fontSize='22px';
                    }
                    span.innerHTML=lib.translate[packlist[i]+'_character_config'];
                    span.link=packlist[i];
                    span.addEventListener(lib.config.touchscreen?'touchend':'click',clickCapt);
                    newlined2.appendChild(span);
                    if(filternode&&!onlypack){
                        span.touchlink=ui.create.div(filternode.firstChild,clickCaptNode,'.menubutton.large',span.innerHTML);
                        span.touchlink.link=span;
                    }
                }
            }

            var groupSort;
            if(thisiscard){
                groupSort=function(name){
                    var type=lib.card[name[2]].type;
                    if(lib.cardType[type]){
                        return lib.cardType[type];
                    }
                    switch(type){
                        case 'basic':return 0;
                        case 'chess':return 1.5;
                        case 'trick':return 2;
                        case 'delay':return 3;
                        case 'equip':return 4;
                        case 'zhenfa':return 5;
                        default:return 6;
                    }
                };
            }
            else{
                groupSort=function(name){
                    if(lib.character[name][1]=='shen') return -1;
                    if(lib.character[name][1]=='wei') return 0;
                    if(lib.character[name][1]=='shu') return 1;
                    if(lib.character[name][1]=='wu') return 2;
                    if(lib.character[name][1]=='qun') return 3;
                    return 4
                }
            }
            list.sort(function(a,b){
                var del=groupSort(a)-groupSort(b);
                if(del!=0) return del;
                var aa=a,bb=b;
                if(a.indexOf('_')!=-1){
                    a=a.slice(a.lastIndexOf('_')+1);
                }
                if(b.indexOf('_')!=-1){
                    b=b.slice(b.lastIndexOf('_')+1);
                }
                if(a!=b){
                    return a>b?1:-1;
                }
                return aa>bb?1:-1;
            });
            dialog=ui.create.dialog('hidden');
            dialog.classList.add('noupdate');
            dialog.classList.add('scroll1');
            dialog.classList.add('scroll2');
            dialog.classList.add('scroll3');
            dialog.addEventListener(lib.config.touchscreen?'touchend':'mouseup',function(){
                _status.clicked2=true;
            });
            if(heightset){
                dialog.style.height=((game.layout=='long2'||game.layout=='nova')?380:350)+'px';
                dialog._scrollset=true;
            }
            dialog.getCurrentCapt=function(link,capt,noalph){
                var currentcapt=noalph?this.currentcapt2:this.currentcapt;
                if(this.seperatelist&&noalph){
                    if(this.seperatelist[currentcapt].contains(link)) return capt;
                    return null;
                }
                if(lib.characterDialogGroup[currentcapt]){
                    return lib.characterDialogGroup[currentcapt](link,capt);
                }
                if(lib.characterPack[currentcapt]){
                    if(lib.characterPack[currentcapt][link]){
                        return capt;
                    }
                    return null;
                }
                return this.currentcapt;
            }
            if(str){
                dialog.add(str);
            }
            dialog.add(node);
            if(thisiscard){
                if(seperate){
                    seperate=seperate(list);
                    dialog.seperate=[];
                    dialog.seperatelist=seperate.list;
                    if(dialog.seperatelist){
                        newlined=document.createElement('div');
                        newlined.style.marginTop='5px';
                        newlined.style.display='block';
                        newlined.style.fontFamily='xinwei';
                        if(get.is.phoneLayout()){
                            newlined.style.fontSize='32px';
                        }
                        else{
                            newlined.style.fontSize='22px';
                        }
                        newlined.style.textAlign='center';
                        node.appendChild(newlined);
                        for(var i in dialog.seperatelist){
                            var span=document.createElement('span');
                            span.style.margin='3px';
                            span.innerHTML=i;
                            span.link=i;
                            span.seperate=true;
                            span.addEventListener(lib.config.touchscreen?'touchend':'click',clickCapt);
                            newlined.appendChild(span);
                        }
                    }
                    for(var i in seperate){
                        if(i=='list') continue;
                        var link='';
                        var linkcontent=seperate[i];
                        if(i.indexOf('_link:')!=-1){
                            link=i.slice(i.indexOf('_link:')+6);
                            i=i.slice(0,i.indexOf('_link:'));
                        }
                        var nodesep=dialog.add(i);
                        nodesep.link=link;
                        dialog.seperate.push(nodesep);
                        dialog.add([linkcontent,'vcard'],noclick);
                    }
                }
                else{
                    dialog.add([list,'vcard'],noclick);
                }
            }
            else{
                if(precharacter){
                    dialog.add([list,'precharacter'],noclick);
                }
                else{
                    dialog.add([list,'character'],noclick);
                }
            }
            dialog.add(ui.create.div('.placeholder'));
            for(i=0;i<dialog.buttons.length;i++){
                if(thisiscard){
                    dialog.buttons[i].capt=getCapt(dialog.buttons[i].link[2]);
                }
                else{
                    dialog.buttons[i].group=lib.character[dialog.buttons[i].link][1];
                    dialog.buttons[i].capt=getCapt(dialog.buttons[i].link);
                }
            }
            if(!expandall){
                if(!thisiscard&&(lib.characterDialogGroup[lib.config.character_dialog_tool]||
                    lib.config.character_dialog_tool=='自创')){
                    clickCapt.call(node[lib.config.character_dialog_tool]);
                }
            }
            return dialog;
        },
        dialog:function(){
            var i;
            var hidden=false;
            var notouchscroll=false;
            var forcebutton=false;
            var dialog=ui.create.div('.dialog');
            dialog.contentContainer=ui.create.div('.content-container',dialog);
            dialog.content=ui.create.div('.content',dialog.contentContainer);
            dialog.bar1=ui.create.div('.bar.top',dialog);
            dialog.bar2=ui.create.div('.bar.bottom',dialog);
            dialog.buttons=[];
            for(i in lib.element.dialog){
                dialog[i]=lib.element.dialog[i];
            }
            for(i=0;i<arguments.length;i++){
                if(typeof arguments[i]=='boolean') dialog.static=arguments[i];
                else if(arguments[i]=='hidden') hidden=true;
                else if(arguments[i]=='notouchscroll') notouchscroll=true;
                else if(arguments[i]=='forcebutton') forcebutton=true;
                else dialog.add(arguments[i]);
            }
            if(!hidden){
                dialog.open();
            }
            if(!lib.config.touchscreen) dialog.contentContainer.onscroll=ui.update;
            if(!notouchscroll){
                dialog.contentContainer.ontouchstart=ui.click.dialogtouchStart;
                dialog.contentContainer.ontouchmove = ui.click.touchScroll;
                dialog.contentContainer.style.WebkitOverflowScrolling='touch';
                dialog.ontouchstart=ui.click.dragtouchdialog;
            }
            if(forcebutton){
                dialog.forcebutton=true;
                dialog.classList.add('forcebutton');
            }
            return dialog;
        },
        line2:function(){
            var node=ui.create.line.apply(this,arguments);
            node.classList.add('line2');
            return node;
        },
        line:function(){
            var two=false,func;
            var node=ui.create.div('.config');
            for(var i=0;i<arguments.length;i++){
                if(typeof arguments[i]=='string'||typeof arguments[i]=='number'){
                    if(two) ui.create.div('.toggle',node).innerHTML=arguments[i];
                    else {
                        ui.create.div(node).innerHTML=arguments[i];
                        two=true;
                    }
                }
                else if(typeof arguments[i]=='function') func=arguments[i];
            }
            if(func){
                for(var i=0;i<node.childNodes.length;i++) node.childNodes[i].listen(func);
            }
            return node;
        },
        switcher:function(name,current,current2){
            var func;
            var node=ui.create.div('.config');
            ui.create.div(node).innerHTML=get.translation(name+'_config');
            var switcher=ui.create.div('.toggle.pointerdiv',node);
            switcher.name=name;
            for(var i=0;i<arguments.length;i++){
                if(typeof arguments[i]=='function'){
                    func=arguments[i];break;
                }
            }
            if(typeof current=='string'){
                switcher.link=current;
                switcher.innerHTML=get.translation(current);
                switcher.contentEditable=true;
                switcher.style.webkitUserSelect='text';
                switcher.addEventListener(lib.config.touchscreen?'touchend':'click',ui.click.editor);
            }
            else if(typeof current=='object'){
                switcher.link=current2||current[0];
                switcher.innerHTML=get.translation(switcher.link);
                switcher.choice=current;
                switcher.addEventListener(lib.config.touchscreen?'touchend':'click',ui.click.switcher);
            }
            else{
                if(current){
                    switcher.classList.add('on');
                }
                switcher.classList.add('onoff');
                ui.create.div(ui.create.div(switcher));
                switcher.link=current?true:false;
                switcher.addEventListener(lib.config.touchscreen?'touchend':'click',ui.click.toggle);
            }
            if(func) switcher.additionalCommand=func;
            return node;
        },
        caption:function(str,position){
            var caption=ui.create.div('.caption',position);
            caption.innerHTML=str;
            return caption;
        },
        control:function(){
            var nc=!ui.control.querySelector('div:not(.removing):not(.stayleft)');
            // for(var i=0;i<ui.control.childNodes.length;i++){
            // 	if(ui.control.childNodes[i].classList.contains('removing')){
            // 		var that=ui.control.childNodes[i];
            // 		var width=that.offsetWidth;
            // 		that.style.marginLeft=(-width/2)+'px';
            // 		that.style.marginRight=(-width/2)+'px';
            // 		that.style.transitionDuration=0.8*parseFloat(getComputedStyle(that).opacity)+'s';
            // 	}
            // }
            var i,controls;
            var nozoom=false;
            if(Array.isArray(arguments[0])) controls=arguments[0];
            else controls=arguments;
            var control=ui.create.div('.control');
            ui.control.insertBefore(control,_status.createControl||ui.confirm);
            for(i in lib.element.control){
                control[i]=lib.element.control[i];
            }
            for(i=0;i<controls.length;i++){
                if(typeof controls[i]=='function'){
                    control.custom=controls[i];
                }
                else if(controls[i]=='nozoom'){
                    nozoom=true;
                }
                else if(controls[i]=='stayleft'){
                    control.stayleft=true;
                    control.classList.add('stayleft');
                }
                else{
                    control.add(controls[i]);
                }
            }
            ui.controls.unshift(control);
            if(nc){
                ui.control.animate('nozoom',100);
            }
            // if(ui.control.classList.contains('nozoom')){
            // 	nozoom=true;
            // }
            // if(nozoom){
            // 	control.classList.add('nozoom');
            // }
            if(control.childNodes.length){
                // if(nozoom||true){
                control.style.transition='opacity 0.5s';
                control.animate('controlpressdownx',500);
                // }
                // else{
                // 	control.style.transition='';
                // 	control.style.transform='scale(0.8)';
                // }
                ui.refresh(control);
                if(!control.stayleft){
                    control.style.transform='translateX(-'+(control.offsetWidth/2)+'px)';
                }
                control.style.opacity=1;
                ui.refresh(control);
                control.style.transition='';
            }

            control.addEventListener(lib.config.touchscreen?'touchend':'click',ui.click.control2);

            if(lib.config.button_press){
                control.addEventListener(lib.config.touchscreen?'touchstart':'mousedown',function(){
                    if(this.classList.contains('disabled')) return;
                    this.classList.add('controlpressdown');
                    if(typeof this._offset=='number'){
                        this.style.transform='translateX('+this._offset+'px) scale(0.97)';
                    }
                });
                control.addEventListener(lib.config.touchscreen?'touchend':'mouseup',function(){
                    this.classList.remove('controlpressdown');
                    if(typeof this._offset=='number'){
                        this.style.transform='translateX('+this._offset+'px)';
                    }
                });
            }

            ui.updatec();
            return control;
        },
        confirm:function(str,func){
            if(ui.confirm&&ui.confirm.str==str){
                return;
            }
            if(str=='o'){
                if(ui.confirm){
                    ui.confirm.replace('ok');
                }
                else{
                    ui.confirm=ui.create.control('ok');
                }
            }
            else if(str=='oc'||str=='co'){
                if(ui.confirm){
                    ui.confirm.replace('ok','cancel');
                }
                else{
                    ui.confirm=ui.create.control('ok','cancel');
                }
            }
            else if(str=='c'){
                if(ui.confirm){
                    ui.confirm.replace('cancel');
                }
                else{
                    ui.confirm=ui.create.control('cancel');
                }
            }
            else if(ui.confirm){
                ui.confirm.close();
                delete ui.confirm;
            }
            if(ui.confirm){
                ui.confirm.str=str;
                if(func) ui.confirm.custom=func;
                else delete ui.confirm.custom;
            }
        },
        skills:function(skills){
            var i,same;
            if(ui.skills){
                if(ui.skills.skills.length==skills.length&&ui.skills.style.display!='none'){
                    same=true;
                    for(i=0;i<skills.length;i++){
                        if(ui.skills.skills.contains(skills[i])==false){
                            same=false;
                            break;
                        }
                    }
                }
                if(same) return;
                ui.skills.close();
                delete ui.skills;
            }
            if(skills==undefined||skills.length==0) return;
            if(!_status.event.isMine()){
                _status.noupdatec=true;
            }
            ui.skills=ui.create.control(skills.concat([ui.click.skill]));
            for(var i=0;i<ui.skills.childNodes.length;i++){
                ui.skills.childNodes[i].innerHTML=get.skillTranslation(ui.skills.childNodes[i].link,_status.event.player);
            }
            if(!_status.event.isMine()){
                ui.skills.style.display='none';
            }
            else{
                ui.updatec();
            }
            _status.noupdatec=false;
            ui.skills.skills=skills;
            return ui.skills;
        },
        skills2:function(skills){
            var i,same;
            if(ui.skills2){
                if(ui.skills2.skills.length==skills.length&&ui.skills2.style.display!='none'){
                    same=true;
                    for(i=0;i<skills.length;i++){
                        if(ui.skills2.skills.contains(skills[i])==false){
                            same=false;
                            break;
                        }
                    }
                }
                if(same) return;
                ui.skills2.close();
                delete ui.skills2;
            }
            if(skills==undefined||skills.length==0) return;
            if(!_status.event.isMine()){
                _status.noupdatec=true;
            }
            ui.skills2=ui.create.control(skills.concat([ui.click.skill]));
            for(var i=0;i<ui.skills2.childNodes.length;i++){
                ui.skills2.childNodes[i].innerHTML=get.skillTranslation(ui.skills2.childNodes[i].link,_status.event.player);
            }
            if(!_status.event.isMine()){
                ui.skills2.style.display='none';
            }
            else{
                ui.updatec();
            }
            _status.noupdatec=false;
            ui.skills2.skills=skills;
            return ui.skills2;
        },
        skills3:function(skills){
            var i,same;
            if(ui.skills3){
                if(ui.skills3.skills.length==skills.length&&ui.skills3.style.display!='none'){
                    same=true;
                    for(i=0;i<skills.length;i++){
                        if(ui.skills3.skills.contains(skills[i])==false){
                            same=false;
                            break;
                        }
                    }
                }
                if(same) return;
                ui.skills3.close();
                delete ui.skills3;
            }
            if(skills==undefined||skills.length==0) return;
            if(!_status.event.isMine()){
                _status.noupdatec=true;
            }
            ui.skills3=ui.create.control(skills.concat([ui.click.skill]));
            for(var i=0;i<ui.skills3.childNodes.length;i++){
                ui.skills3.childNodes[i].innerHTML=get.skillTranslation(ui.skills3.childNodes[i].link,_status.event.player);
            }
            if(!_status.event.isMine()){
                ui.skills3.style.display='none';
            }
            else{
                ui.updatec();
            }
            _status.noupdatec=false;
            ui.skills3.skills=skills;
            return ui.skills3;
        },
        arena:function(){
            var i,j;
            ui.window=ui.create.div('#window.hidden',document.body);
            ui.create.div('#statusbg',document.body);
            ui.refresh(ui.window);
            if(!localStorage.getItem(lib.configprefix+'playback')){
                ui.window.show();
            }
            else{
                setTimeout(function(){
                    ui.window.show();
                },1000);
            }
            // lib.setPressure(ui.window,ui.click.pressurepause);
            if(window.isNonameServer){
                ui.window.classList.add('server');
                var serverinfo=ui.create.div('.serverinfo',ui.window);
                ui.create.div('','服务器正在运行',serverinfo);
                var serverinfotable=ui.create.table(2,2,ui.create.div(serverinfo));
                serverinfotable.style.display='inline-block';
                serverinfotable.firstChild.firstChild.innerHTML='房间人数：';
                serverinfotable.firstChild.lastChild.id='server_count';
                serverinfotable.firstChild.lastChild.innerHTML='0';
                serverinfotable.lastChild.firstChild.innerHTML='房间状态：';
                serverinfotable.lastChild.lastChild.id='server_status';
                serverinfotable.lastChild.lastChild.innerHTML='空闲';
                ui.create.div('.menubutton.large','关闭服务器',function(){
                    if(_status.gameStarted&&!confirm('关闭服务器当前进行的游戏将终止且不可恢复，是否确定关闭？')){
                        return;
                    }
                    localStorage.removeItem(lib.configprefix+'asserver');
                    game.reload();
                },ui.create.div('',serverinfo));
            }

            ui.window.addEventListener(lib.config.touchscreen?'touchend':'click',ui.click.window);
            ui.system=ui.create.div("#system.",ui.window);
            ui.arena=ui.create.div('#arena.nome',ui.window);
            if(lib.device=='ios'&&!get.is.phoneLayout()){
                ui.arena.classList.add('ipad');
            }
            ui.arena.setNumber=function(num){
                this.dataset.number=num;
                // if(game.layout=='nova'&&parseInt(num)<7){
                // 	ui.arena.classList.add('player_autolong');
                // }
                // else if(lib.config.player_height_nova!='long'){
                // 	ui.arena.classList.remove('player_autolong');
                // }
                // if(game.layout=='long'&&parseInt(num)<parseInt(lib.config.fewplayer)){
                //     this.classList.add('fewplayer');
                // }
                // else{
                //     this.classList.remove('fewplayer');
                // }
            }

            if(lib.config.low_performance){
                ui.window.classList.add('low_performance');
            }
            if(game.layout=='mobile'||game.layout=='long'){
                ui.arena.classList.add('mobile');
            }
            if(game.layout=='long'||game.layout=='long2'){
                ui.arena.classList.add('long');
            }
            if(game.layout=='default'){
                ui.arena.classList.add('oldlayout');
            }
            if(lib.config.player_border!='wide'||game.layout=='long'||game.layout=='long2'){
                ui.arena.classList.add('slim_player');
            }
            if(lib.config.player_border=='slim'){
                ui.arena.classList.add('uslim_player');
            }
            if(lib.config.player_border=='narrow'){
                ui.arena.classList.add('mslim_player');
            }
            if(lib.config.player_border=='normal'&&lib.config.mode!='brawl'&&(game.layout=='long'||game.layout=='long2')){
                ui.arena.classList.add('lslim_player');
            }
            ui.window.dataset.player_border=lib.config.player_border;
            if(lib.config.compatiblemode){
                ui.window.classList.add('compatiblemode');
            }
            ui.window.dataset.radius_size=lib.config.radius_size||'default';
            if(game.layout=='long'||game.layout=='mobile'){
                if(lib.config.textequip=='text') ui.arena.classList.add('textequip');
            }
            if(game.layout=='long'||game.layout=='long2'||game.layout=='mobile'||game.layout=='nova'){
                if(lib.config.cardshape=='oblong'){
                    ui.window.classList.add('oblongcard');
                    ui.arena.classList.add('oblongcard');
                }
            }
            if(lib.config.blur_ui){
                ui.window.classList.add('blur_ui');
            }
            if(lib.config.glass_ui){
                ui.window.classList.add('glass_ui');
            }
            if(lib.config.custom_button){
                lib.configMenu.appearence.config.custom_button.onclick('skip');
            }

            if(lib.config.show_statusbar_ios=='overlay'){
                document.body.classList.add('statusbar');
            }
            if(lib.config.keep_awake&&window.plugins&&window.plugins.insomnia){
                window.plugins.insomnia.keepAwake();
            }

            lib.init.cssstyles();

            ui.arena.dataset.player_height=lib.config.player_height||'default';
            ui.arena.dataset.player_height_nova=lib.config.player_height_nova||'default';
            // if(lib.config.player_height_nova=='long') ui.arena.classList.add('player_autolong');
            ui.arena.dataset.target_shake=lib.config.target_shake||'off';
            ui.backgroundMusic=document.createElement('audio');
            ui.backgroundMusic.volume=lib.config.volumn_background/8;
            game.playBackgroundMusic();
            ui.backgroundMusic.autoplay=true;
            ui.backgroundMusic.addEventListener('ended',game.playBackgroundMusic);
            ui.window.appendChild(ui.backgroundMusic);
            if(lib.config.cursor_style=='pointer'){
                ui.window.classList.add('nopointer');
            }
            if(lib.config.turned_style==false){
                ui.arena.classList.add('hide_turned');
            }
            if(lib.config.link_style2!='chain'){
                ui.arena.classList.add('nolink');
            }
            if(lib.config.show_name==false){
                ui.arena.classList.add('hide_name');
            }
            if(lib.config.change_skin_auto!='off'){
                _status.skintimeout=setTimeout(ui.click.autoskin,parseInt(lib.config.change_skin_auto));
            }
            if(lib.config.border_style&&lib.config.border_style.indexOf('dragon_')==0){
                ui.arena.dataset.framedecoration=lib.config.border_style.slice(7);
            }

            ui.gameinfo=ui.create.div('#time',ui.window);

            ui.arenalog=ui.create.div('#arenalog',ui.arena);
            if(lib.config.show_log=='off'){
                ui.arenalog.style.display='none';
            }
            else{
                ui.arenalog.dataset.position=lib.config.show_log;
            }
            ui.historybar=ui.create.div('#historybar.shadowed',ui.window);
            lib.setScroll(ui.historybar);

            ui.roundmenu=ui.create.div('#roundmenu.roundarenabutton.menubutton.round',ui.arena);
            ui.roundmenu._position=[180,210];
            ui.create.div(ui.roundmenu);
            ui.create.div(ui.roundmenu);
            ui.create.div(ui.roundmenu);
            ui.create.div(ui.roundmenu);
            ui.create.div(ui.roundmenu);
            ui.create.div(ui.roundmenu);

            ui.create.div(ui.roundmenu);
            ui.create.div(ui.roundmenu);
            ui.create.div(ui.roundmenu);
            ui.create.div(ui.roundmenu);
            ui.create.div(ui.roundmenu);
            ui.create.div(ui.roundmenu);

            ui.create.div(ui.roundmenu);
            ui.create.div(ui.roundmenu);

            ui.create.div(ui.roundmenu);

            if(lib.config.show_time2){
                ui.roundmenu.classList.add('clock');
            }
            ui.roundmenu.dataset.watchface=lib.config.watchface||'none';
            if(get.is.phoneLayout()){
                if(lib.config.show_time3){
                    ui.time3=ui.create.div('.touchinfo.left',ui.window);
                }
                ui.cardPileNumber=ui.create.div('.touchinfo.right',ui.window);
            }
            else{
                if(lib.config.show_time3){
                    ui.time3=ui.create.div(ui.gameinfo);
                }
                ui.cardPileNumber=ui.create.div(ui.gameinfo);
            }
            if(!lib.config.show_cardpile_number){
                ui.cardPileNumber.style.display='none';
            }
            if(ui.time3){
                ui.time3.starttime=get.utc();
                ui.time3.interval=setInterval(function(){
                    var num=Math.round((get.utc()-ui.time3.starttime)/1000);
                    if(num>=3600){
                        var num1=Math.floor(num/3600);
                        var num2=Math.floor((num-num1*3600)/60);
                        if(num2<10){
                            num2='0'+num2.toString();
                        }
                        var num3=num-num1*3600-num2*60;
                        if(num3<10){
                            num3='0'+num3.toString();
                        }
                        ui.time3.innerHTML=num+':'+num2+':'+num3;
                    }
                    else{
                        var num1=Math.floor(num/60);
                        var num2=num-num1*60;
                        if(num2<10){
                            num2='0'+num2.toString();
                        }
                        ui.time3.innerHTML=num1+':'+num2;
                    }
                },1000);
            }
            if(get.is.nomenu()){
                if(!['menu','system'].contains(lib.config.round_menu_func)){
                    lib.config.round_menu_func='system';
                }
            }
            else if(!lib.config.show_round_menu){
                ui.roundmenu.style.display='none';
            }

            var resetround=function(e){
                _status.draggingroundmenu=false;
                ui.roundmenu.style.transform='';
                ui.roundmenu._dragtransform=[0,0];
                ui.roundmenu.style.transition='all 0.3s';
                delete ui.roundmenu._dragtouches;
                delete ui.roundmenu._dragorigin;
                delete ui.roundmenu._dragorigintransform;
                setTimeout(function(){
                    ui.roundmenu.style.transition='';
                },500);
                game.saveConfig('roundmenu_transform',[0,0]);
                if(e) e.stopPropagation();
                return false;
            };
            ui.click.resetround=resetround;
            if(lib.config.touchscreen){
                ui.roundmenu.addEventListener('touchstart',function(e){
                    _status.draggingroundmenu=true;
                    ui.roundmenu._dragorigin={
                        clientX:e.touches[0].clientX,
                        clientY:e.touches[0].clientY,
                    };
                    if(!ui.roundmenu._dragtransform){
                        ui.roundmenu._dragtransform=[0,0];
                    }
                    ui.roundmenu._dragorigintransform=ui.roundmenu._dragtransform.slice(0);
                    ui.roundmenu._resetTimeout=setTimeout(function(){
                        resetround();
                        delete ui.roundmenu._resetTimeout;
                    },1000);
                });
            }
            else{
                ui.roundmenu.oncontextmenu=resetround;
            }
            if(!lib.config.remember_round_button){
                game.saveConfig('roundmenu_transform');
            }
            if(lib.config.roundmenu_transform){
                var translate=lib.config.roundmenu_transform;
                ui.roundmenu._dragtransform=translate;
                ui.roundmenu.style.transform='translate('+translate[0]+'px,'+translate[1]+'px)';
                ui.click.checkroundtranslate();
            }
            if(get.is.phoneLayout()){
                ui.arena.classList.add('phone');
            }

            ui.sidebar=ui.create.div('#sidebar');
            ui.sidebar3=ui.create.div('#sidebar3');
            ui.canvas=document.createElement('canvas');

            ui.arena.appendChild(ui.canvas);
            ui.canvas.id='canvas';
            ui.ctx=ui.canvas.getContext('2d');

            ui.sidebar.ontouchstart=ui.click.touchStart;
            ui.sidebar.ontouchmove = ui.click.touchScroll;
            ui.sidebar.style.WebkitOverflowScrolling='touch';

            var zoom;
            switch(lib.config.ui_zoom){
                case 'esmall':zoom=0.8;break;
                case 'vsmall':zoom=0.9;break;
                case 'small':zoom=0.93;break;
                case 'big':zoom=1.05;break;
                case 'vbig':zoom=1.1;break;
                case 'ebig':zoom=1.2;break;
                default:zoom=1;
            }
            game.documentZoom=game.deviceZoom*zoom;
            if(zoom!=1){
                ui.updatez();
            }

            ui.system1=ui.create.div('#system1',ui.system);
            ui.system2=ui.create.div('#system2',ui.system);

            ui.replay=ui.create.system('重来',game.reload,true);
            ui.replay.id='restartbutton';
            ui.config2=ui.create.system('选项',ui.click.config);
            ui.pause=ui.create.system('暂停',ui.click.pause);
            ui.pause.id='pausebutton';
            if(!_status.video){
                ui.pause.hide();
            }
            if(!lib.config.touchscreen){
                lib.setPopped(ui.pause,ui.click.pausehistory,220,400,null,true);
            }
            if(!lib.config.show_pause){
                ui.pause.style.display='none';
            }
            ui.cardPileButton=ui.create.system('牌堆',null,true);
            ui.cardPileButton.style.display='none';
            lib.setPopped(ui.cardPileButton,ui.click.cardPileButton,220);
            ui.wuxie=ui.create.system('不询问无懈',ui.click.wuxie,true);
            if(!lib.config.touchscreen){
                lib.setPopped(ui.config2,ui.click.pauseconfig,170);
            }
            ui.auto=ui.create.system('托管',ui.click.auto);
            if(!game.syncMenu){
                ui.config2.classList.add('hidden');
                ui.config2.style.transition='all 0.5s';
                ui.roundmenu.classList.add('transparent2');

                ui.auto.style.opacity=0.5;
                ui.auto.style.transition='all 0.5s';
                lib.onfree.push(function(){
                    ui.auto.style.opacity='';
                    setTimeout(function(){
                        ui.auto.style.transition='';
                    },500);
                });
            }
            ui.auto.id='autobutton';
            ui.autonode=ui.create.div('#autonode','<div>托管中...</div>',ui.arena);
            ui.autonode.listen(ui.click.auto);
            if(lib.config.mode=='connect'){
                ui.auto.hide();
                ui.pause.hide();
            }

            if(lib.forcehide){
                if(lib.forcehide.contains('replay')) ui.replay.classList.add('forcehide');
                if(lib.forcehide.contains('auto')) ui.auto.classList.add('forcehide');
                if(lib.forcehide.contains('pause')) ui.pause.classList.add('forcehide');
                if(lib.forcehide.contains('wuxie')) ui.wuxie.classList.add('forcehide');
                if(lib.forcehide.contains('cardPileButton')) ui.cardPileButton.classList.add('forcehide');
            }
            ui.volumn=ui.create.system('♫');
            lib.setPopped(ui.volumn,ui.click.volumn,200);
            // if(lib.config.show_pause) ui.auto.style.marginLeft='10px';
            if(!lib.config.show_volumn){
                ui.volumn.style.display='none';
            }
            if(!lib.config.show_auto){
                ui.auto.style.display='none';
            }
            if(!lib.config.show_wuxie){
                ui.wuxie.style.display='none';
            }
            // if(!lib.config.show_cardpile||_status.connectMode){
            // 	ui.cardPileButton.style.display='none';
            // }
            ui.playerids=ui.create.system('显示身份',function(){
                if(game.showIdentity){
                    game.showIdentity();
                    _status.identityShown=true;
                }
            },true);
            if(!lib.config.show_playerids||!game.showIdentity){
                ui.playerids.style.display='none';
            }
            if(!lib.config.show_replay){
                ui.replay.style.display='none';
            }
            ui.control=ui.create.div('#control',ui.arena).animate('nozoom');
            ui.cardPile=ui.create.div('#cardPile');
            ui.discardPile=ui.create.div('#discardPile');
            ui.special=ui.create.div('#special');
            ui.dialogs=[];
            ui.controls=[];
            ui.style={};

            ui.time=ui.create.div(ui.gameinfo);
            var timeInterval=function(){
                var date=new Date();
                var hours=date.getHours();
                var minutes=date.getMinutes();
                if(lib.config.watchface=='simple'){
                    ui.roundmenu.childNodes[13].style.transform='rotate('+get.round((hours+9)*30,2)+'deg)';
                }
                else{
                    ui.roundmenu.childNodes[13].style.transform='rotate('+get.round((hours+minutes/60+9)*30,2)+'deg)';
                }
                ui.roundmenu.childNodes[12].style.transform='rotate('+(minutes+45)*6+'deg)';
                if(minutes<10){
                    minutes='0'+minutes.toString();
                }
                ui.time.innerHTML=hours+':'+minutes;
            };
            _status.timeInterval=setInterval(timeInterval,30000);
            timeInterval();
            if(!lib.config.show_time){
                ui.time.style.display='none';
            }

            ui.timer=ui.create.div('.skillbar.shadowed.playerbg.hidden');
            ui.timer.id='timer';
            ui.create.div('.skillbarshadow',ui.timer);
            ui.create.div('.skillbarfill',ui.timer);
            ui.timer.fillnode=ui.create.div(ui.timer.lastChild);
            ui.timer.popnode=ui.create.div('.skillbartext',ui.timer);
            ui.timer.popnode.style.opacity=1;
            ui.timer.position=4;
            ui.timer.style.zIndex=5;
            ui.timer.set=function(text,percentage){
                if(typeof text=='string'||typeof text=='number'){
                    ui.timer.popnode.innerHTML=text;
                }
                ui.timer.fillnode.style.top=((1-percentage)*100)+'%';
            }
            var setTimerPosition=function(e){
                this.position++;
                if(this.position>4){
                    this.position=1;
                }
                var left1='180px';
                var left2='calc(100% - 245px)';
                var top1='210px';
                var top2='calc(100% - 245px)';
                if(game.layout=='default'){
                    left1='265px';
                    top1='160px';
                    left2='calc(100% - 330px)';
                    top2='calc(100% - 235px)';
                }
                if(this.position==1||this.position==2){
                    this.style.top=top2;
                }
                else{
                    this.style.top=top1;
                }
                if(this.position==1||this.position==4){
                    this.style.left=left2;
                }
                else{
                    this.style.left=left1;
                }
            }
            ui.timer.listen(setTimerPosition);

            ui.shortcut=ui.create.div('#shortcut.hidden',ui.window);
            ui.shortcut.listen(ui.click.shortcut);
            ui.create.div(ui.shortcut,function(e){e.stopPropagation()});
            ui.create.div('.menubutton.round','<span>重来</span>',ui.shortcut,game.reload).dataset.position=1;
            ui.create.div('.menubutton.round','<span>退出</span>',ui.shortcut,game.exit).dataset.position=3;
            ui.create.div('.menubutton.round','<span>记录</span>',ui.shortcut,ui.click.pause).dataset.position=4;
            ui.shortcut.autobutton=ui.create.div('.menubutton.round','<span>托管</span>',ui.shortcut,ui.click.auto);
            ui.shortcut.autobutton.dataset.position=2;
            ui.favmodelist=ui.create.div('.favmodelist',ui.shortcut);
            ui.favmodelist.update=function(){
                this.innerHTML='';
                var num=Math.min(6,lib.config.favouriteMode.length);
                for(var i=0;i<num;i++){
                    this.add(lib.config.favouriteMode[i],i);
                }
                var mode=get.mode();
                if(typeof get.config(mode+'_mode')=='string'){
                    mode+='|'+get.config(mode+'_mode');
                }
                if(lib.config.favouriteMode.contains(mode)){
                    ui.favmode.classList.add('glow');
                }
                else{
                    ui.favmode.classList.remove('glow');
                }
            };
            ui.favmodelist.add=function(name,index){
                var info=name.split('|');
                var mode=info[0];
                var submode=info[1];
                var node=ui.create.div('.menubutton.large',this);
                var num=Math.min(6,lib.config.favouriteMode.length);
                node.dataset.type=num%2==0?'even':'odd';
                node.dataset.position=index;
                var str=lib.translate[name]||lib.translate[mode]||'';
                if(str.length==2){
                    str+='模式';
                }
                node.innerHTML=str;
                node.listen(function(){
                    game.saveConfig('mode',mode);
                    if(submode){
                        game.saveConfig(mode+'_mode',submode,mode);
                    }
                    game.reload();
                });
            };
            ui.favmode=ui.create.system('收藏',function(){
                var mode=get.mode();
                if(typeof _status.mode=='string'){
                    mode+='|'+_status.mode;
                }
                if(this.classList.contains('glow')){
                    this.classList.remove('glow');
                    lib.config.favouriteMode.remove(mode);
                }
                else{
                    this.classList.add('glow');
                    lib.config.favouriteMode.add(mode);
                }
                game.saveConfig('favouriteMode',lib.config.favouriteMode);
                ui.favmodelist.update();
                _status.clicked=true;
            });
            ui.favmode.style.display='none';
            ui.favmodelist.update();
            // ui.create.div('.menubutton.round','<span>菜单</span>',ui.shortcut,ui.click.config).dataset.position=5;


            if(_status.connectMode){
                ui.playerids.remove();
                ui.pause.innerHTML='记录';
            }
            setTimerPosition.call(ui.timer);
            ui.arena.appendChild(ui.timer);

            if(!game.syncMenu){
                lib.onfree.push(function(){
                    ui.create.menu();
                    ui.config2.classList.remove('hidden');
                    ui.roundmenu.classList.remove('transparent2');
                    setTimeout(function(){
                        ui.config2.style.transition='';
                    },500);
                });
            }
            else{
                ui.create.menu();
            }

            lib.status.date=new Date();
            lib.status.dateDelayed=0;

            while(lib.arenaReady.length){
                (lib.arenaReady.shift())();
            }
            delete lib.arenaReady;
            if(lib.config.auto_check_update){
                setTimeout(function(){
                    game.checkForUpdate(false);
                },3000);
            }
            if(!lib.config.asset_version){
                lib.onfree.push(function(){
                    setTimeout(function(){
                        if(!game.download){
                            game.saveConfig('asset_version','无');
                        }
                        else{
                            var func=function(){
                                if(confirm('是否下载图片和字体素材？（约40MB）')){
                                    if(!ui.arena.classList.contains('menupaused')){
                                        ui.click.configMenu();
                                        ui.click.menuTab('其它');
                                    }
                                    setTimeout(game.checkForAssetUpdate,500);
                                }
                                else{
                                    game.saveConfig('asset_version','无');
                                }
                            }
                            if(_status.new_tutorial){
                                _status.new_tutorial=func;
                            }
                            else{
                                func();
                            }
                        }
                    },3000);
                });
            }
            if(localStorage.getItem(lib.configprefix+'playback')){
                setTimeout(lib.init.onfree);
            }

            if(lib.config.test_game){
                ui.window.classList.add('testing');
                lib.config.game_speed='vfast';
                lib.config.low_performance=true;
                lib.config.animation=false;
                _status.auto=true;
                ui.auto.classList.add('glow');
                setTimeout(function(){
                    var node=ui.create.pause().animate('start');
                    node.appendChild(ui.sidebar);
                    node.firstChild.innerHTML='正在测试';
                    node.removeEventListener('click',ui.click.resume);
                },500);
            }
        },
        system:function(str,func,right,before){
            var parent=right?ui.system2:ui.system1;
            var node=ui.create.div();
            if(before){
                parent.insertBefore(node,parent.firstChild);
            }
            else{
                parent.appendChild(node);
            }
            node.innerHTML=str;
            if(func){
                node.listen(func);
            }
            if(lib.config.button_press){
                node.addEventListener(lib.config.touchscreen?'touchstart':'mousedown',function(e){
                    if(!node.classList.contains('hidden')) node.classList.add('pressdown');
                });
                node.addEventListener(lib.config.touchscreen?'touchend':'mouseup',function(e){
                    node.classList.remove('pressdown');
                });
                node.addEventListener(lib.config.touchscreen?'touchmove':'mousemove',function(e){
                    node.classList.remove('pressdown');
                });
            }
            return node;
        },
        pause:function(){
            if(_status.pausing) return;
            ui.click.shortcut(false);
            var node=ui.create.div(".pausedbg",ui.window);
            _status.pausing=true;
            setTimeout(function(){
                _status.pausing=false;
            },500);
            if(lib.config.touchscreen){
                setTimeout(function(){
                    node.addEventListener('touchend',ui.click.resume);
                },500);
            }
            else{
                node.addEventListener('click',ui.click.resume);
            }
            if(!lib.config.touchscreen){
                node.oncontextmenu=ui.click.resume;
            }

            var node2=ui.create.div(node);
            if(_status.connectMode){
                node2.innerHTML='';
            }
            else{
                node2.innerHTML='已暂停';
            }

            // node2.listen(function(){
            // 	_status.clicked=true;
            // 	if(ui.sidebar.classList.contains('hidden')){
            // 		ui.sidebar.show();
            // 		ui.sidebar3.show();
            // 	}
            // 	else{
            // 		ui.sidebar.hide();
            // 		ui.sidebar3.hide();
            // 	}
            // });
            return node;
        },
        prebutton:function(item,type,position,noclick){
            var node=ui.create.div(position);
            node.style.display='none';
            node.link=item;
            node.activate=function(){
                ui.create.button(item,type,position,noclick,node);
                delete node.activate;
            }
            _status.prebutton.push(node);
            return node;
        },
        button:function(item,type,position,noclick,node){
            switch(type){
                case 'blank':
                node=ui.create.div('.button.card',position);
                node.link=item;
                break;

                case 'card':
                if(typeof item.copy=='function'){
                    node=item.copy(false);
                }
                else{
                    node=item.cloneNode(true);
                }
                node.classList.add('button');
                position.appendChild(node);
                node.link=item;
                if(item.style.backgroundImage){
                    node.style.backgroundImage=item.style.backgroundImage;
                    node.style.backgroundSize='cover';
                }
                if(item.style.color){
                    node.style.color=item.style.color;
                }
                if(item.nature){
                    node.classList.add(item.nature);
                }
                if(!noclick){
                    lib.setIntro(node);
                }
                break;

                case 'vcard':
                if(typeof item=='string'){
                    item=[get.type(item),'',item];
                }
                node=ui.create.card(position,'noclick',noclick);
                node.classList.add('button');
                node.init(item);
                node.link=item;
                break;

                case 'character':case 'player':
                if(node){
                    node.classList.add('button');
                    node.classList.add('character');
                    node.style.display='';
                }
                else{
                    node=ui.create.div('.button.character',position);
                }
                node.link=item;
                if(type=='character'){
                    node.setBackground(item,'character');
                    node.node={
                        name:ui.create.div('.name',node),
                        hp:ui.create.div('.hp',node),
                        intro:ui.create.div('.intro',node),
                        group:ui.create.div('.identity',node)
                    }
                    var infoitem=lib.character[item];
                    if(!infoitem){
                        for(var itemx in lib.characterPack){
                            if(lib.characterPack[itemx][item]){
                                infoitem=lib.characterPack[itemx][item];break;
                            }
                        }
                    }
                    node.node.name.innerHTML=get.slimName(item);
                    if(lib.config.buttoncharacter_style=='default'||lib.config.buttoncharacter_style=='simple'){
                        if(lib.config.buttoncharacter_style=='simple'){
                            node.node.group.style.display='none';
                        }
                        node.node.name.dataset.nature=get.groupnature(infoitem[1]);
                        node.node.group.dataset.nature=get.groupnature(infoitem[1],'raw');
                        node.classList.add('newstyle');
                        ui.create.div(node.node.hp);
                        var textnode=ui.create.div('.text',get.numStr(infoitem[2]),node.node.hp);
                        if(infoitem[2]==0){
                            node.node.hp.hide();
                        }
                        else if(get.infoHp(infoitem[2])<=3){
                            node.node.hp.dataset.condition='mid';
                        }
                        else{
                            node.node.hp.dataset.condition='high';
                        }
                    }
                    else{
                        if(typeof infoitem[2]=='string'||infoitem[2]>14){
                            if(typeof infoitem[2]=='string') node.node.hp.innerHTML=infoitem[2];
                            else node.node.hp.innerHTML=get.numStr(infoitem[2]);
                            node.node.hp.classList.add('text');
                        }
                        else{
                            for(var i=0;i<infoitem[2];i++){
                                ui.create.div('',node.node.hp);
                            }
                        }
                    }
                    if(node.node.hp.childNodes.length==0){
                        node.node.name.style.top='8px';
                    }
                    if(node.node.name.querySelectorAll('br').length>=4){
                        node.node.name.classList.add('long');
                        if(lib.config.buttoncharacter_style=='old'){
                            node.addEventListener('mouseenter',ui.click.buttonnameenter);
                            node.addEventListener('mouseleave',ui.click.buttonnameleave);
                        }
                    }
                    node.node.intro.innerHTML=lib.config.intro;
                    if(!noclick){
                        lib.setIntro(node);
                    }
                    if(infoitem[1]){
                        node.node.group.innerHTML='<div>'+get.translation(infoitem[1])+'</div>';
                        node.node.group.style.backgroundColor=get.translation(infoitem[1]+'Color');
                    }
                    else{
                        node.node.group.style.display='none';
                    }
                }
                else{
                    node.node={
                        name:ui.create.div('.name',node),
                        intro:ui.create.div('.intro',node)
                    }
                    if(item.name.indexOf('unknown')==0){
                        if(item.node&&item.node.name_seat){
                            node.classList.add('cardbg');
                            ui.create.div('.avatar_name',node,item.node.name_seat.innerHTML[0]+'号位');
                        }
                        else{
                            node.setBackground(item.name1,'character');
                        }
                    }
                    else{
                        node.setBackground(item.name,'character');
                    }
                }
                break;

                case 'text':
                node=ui.create.div('.button.text',position);
                node.link=item;
                node.innerHTML=item;
                break;
                
                case 'textButton':
                node=ui.create.div('.caption',position);
                node.link=item;
                node.innerHTML=item;
                break;
            }
            if(!noclick){
                node.addEventListener(lib.config.touchscreen?'touchend':'click',ui.click.button);
            }
            else{
                node.classList.add('noclick');
                if(node.querySelector('.intro')){
                    node.querySelector('.intro').remove();
                }
            }
            for(var i in lib.element.button){
                node[i]=lib.element.button[i];
            }
            return node;
        },
        buttons:function(list,type,position,noclick,zoom){
            var buttons=[];
            var pre=(type.slice(0,3)=='pre');
            if(pre){
                if(!_status.prebutton){
                    _status.prebutton=[];
                    lib.onfree.push(function(){
                        for(var i=0;i<_status.prebutton.length;i++){
                            if(_status.prebutton[i].activate){
                                _status.prebutton[i].activate();
                            }
                        }
                        delete _status.prebutton;
                    });
                }
            }
            for(var i=0;i<list.length;i++){
                if(pre){
                    buttons.push(ui.create.prebutton(list[i],type.slice(3),position,noclick));
                }
                else{
                    buttons.push(ui.create.button(list[i],type,position,noclick));
                }
            }
            return buttons;
        },
        player:function(position,noclick){
            var node=ui.create.div('.player',position);
            node.node={
                avatar:ui.create.div('.avatar',node,ui.click.avatar).hide(),
                avatar2:ui.create.div('.avatar2',node,ui.click.avatar2).hide(),
                turnedover:ui.create.div('.turned','<div>翻<br>面<div>',node),
                framebg:ui.create.div('.framebg',node),
                intro:ui.create.div('.intro',node),
                identity:ui.create.div('.identity',node),
                hp:ui.create.div('.hp',node),
                name:ui.create.div('.name',node),
                name2:ui.create.div('.name.name2',node),
                nameol:ui.create.div('.nameol',node),
                count:ui.create.div('.count',node).hide(),
                equips:ui.create.div('.equips',node).hide(),
                judges:ui.create.div('.judges',node),
                marks:ui.create.div('.marks',node),
                chain:ui.create.div('.chain','<div></div>',node),
                handcards1:ui.create.div('.handcards'),
                handcards2:ui.create.div('.handcards'),
            };
            var chainlength=game.layout=='default'?64:40;
            for(var i=0;i<chainlength;i++){
                ui.create.div(node.node.chain.firstChild,'.cardbg').style.transform='translateX('+(i*5-5)+'px)';
            }
            node.node.action=ui.create.div('.action',node.node.avatar);

            node.skipList=[];
            node.skills=[];
            node.initedSkills=[];
            node.additionalSkills={};
            node.disabledSkills={};
            node.hiddenSkills=[];
            node.awakenedSkills=[];
            node.forbiddenSkills={};
            node.popups=[];
            node.damagepopups=[];
            node.judging=[];
            node.stat=[{card:{},skill:{}}];
            node.tempSkills={};
            node.storage={};
            node.marks={};
            node.ai={friend:[],enemy:[],neutral:[],handcards:{global:[],source:[],viewed:[]}};
            node.queueCount=0;
            node.outCount=0;

            for(var i in lib.element.player){
                node[i]=lib.element.player[i];
            }
            node.node.link=node.mark(' ',{mark:get.linkintro});
            node.node.link.firstChild.setBackgroundImage('image/card/tiesuo_mark.png')
            node.node.link.firstChild.style.backgroundSize='cover';
            ui.create.div(node.node.identity);
            if(!noclick){
                node.addEventListener(lib.config.touchscreen?'touchend':'click',ui.click.target);
                node.node.identity.addEventListener(lib.config.touchscreen?'touchend':'click',ui.click.identity);
                if(lib.config.touchscreen){
                    node.addEventListener('touchstart',ui.click.playertouchstart);
                }
            }

            return node;
        },
        connectPlayers:function(ip){
            game.connectPlayers=[];
            for(var i=0;i<8;i++){
                var player=ui.create.player(ui.window);
                player.dataset.position=i;
                player.classList.add('connect');
                game.connectPlayers.push(player);
                if(i>=lib.configOL.number){
                    player.classList.add('unselectable2');
                }
            }

            var bar=ui.create.div(ui.window);
            bar.style.height='20px';
            bar.style.width='80%';
            bar.style.left='10%';
            bar.style.top='calc(200% / 7 - 120px + 5px)';
            bar.style.textAlign='center';
            var ipbar=ui.create.div('.shadowed',ip,bar);
            ipbar.style.padding='4px';
            ipbar.style.borderRadius='2px';
            ipbar.style.position='relative';

            var button=ui.create.div('.menubutton.large.highlight.connectbutton.pointerdiv',game.online?'退出联机':'开始游戏',ui.window,function(){
                if(button.clicked) return;
                if(game.online){
                    if(game.onlinezhu){
                        game.send('startGame');
                    }
                    else{
                        game.saveConfig('tmp_owner_roomId');
                        game.saveConfig('tmp_user_roomId');
                        game.saveConfig('reconnect_info');
                        game.reload();
                    }
                }
                else{
                    game.resume();
                }
                button.delete();
                bar.delete();
                delete ui.connectStartButton;
                delete ui.connectStartBar;
                button.clicked=true;
            });

            ui.connectStartButton=button;
            ui.connectStartBar=bar;
        },
        players:function(num){
            if(num===0){
                return;
            }
            if(num==undefined) num=lib.configOL.number;
            if(num==undefined) num=get.playerNumber();
            if(typeof num=='string'){
                num=parseInt(num);
            }
            if(!num) num=5;
            for(var i=0;i<num;i++){
                var player=ui.create.player().animate('start');
                game.players.push(player);
                player.dataset.position=i;
            }
            var players=game.players;
            for(var i=0;i<players.length;i++){
                if(i>0){
                    players[i].previous=players[i-1];
                    players[i].previousSeat=players[i-1];
                }
                if(i<players.length-1){
                    players[i].next=players[i+1];
                    players[i].nextSeat=players[i+1];
                }
            }
            players[0].previous=players[players.length-1];
            players[0].previousSeat=players[players.length-1];
            players[players.length-1].next=players[0];
            players[players.length-1].nextSeat=players[0];
            ui.arena.setNumber(num);
            for(var i=0;i<num;i++){
                ui.arena.appendChild(players[i]);
            }
            // ui.arena.classList.add('glass');
            // for(var i=0;i<num;i++){
            // 	var bg=ui.create.div('.glassbg');
            // 	var bg2=ui.create.div(bg);
            // 	ui.create.div(bg);
            // 	var rect=players[i].getBoundingClientRect();
            // 	bg2.style.backgroundImage='url("image/background/huangtian_bg.jpg")';
            // 	bg2.style.width=ui.window.offsetWidth+'px';
            // 	bg2.style.height=ui.window.offsetHeight+'px';
            // 	bg2.style.transform='translate('+(-rect.left)+'px,'+(-rect.top)+'px)';
            // 	players[i].insertBefore(bg,players[i].firstChild);
            // }
            return players;
        },
        me:function(hasme){
            ui.mebg=ui.create.div('#mebg',ui.arena);
            ui.me=ui.create.div('#me',ui.arena).animate('start');
            ui.handcards1Container=ui.create.div('#handcards1',ui.me);
            ui.handcards2Container=ui.create.div('#handcards2',ui.me);
            ui.arena.classList.remove('nome');
            if(lib.config.mousewheel&&!lib.config.touchscreen){
                ui.handcards1Container.onmousewheel=ui.click.mousewheel;
                ui.handcards2Container.onmousewheel=ui.click.mousewheel;
            }
            ui.handcards1Container.ontouchstart = ui.click.touchStart;
            ui.handcards2Container.ontouchstart = ui.click.touchStart;
            ui.handcards1Container.ontouchmove = ui.click.touchScroll;
            ui.handcards2Container.ontouchmove = ui.click.touchScroll;
            ui.handcards1Container.style.WebkitOverflowScrolling='touch';
            ui.handcards2Container.style.WebkitOverflowScrolling='touch';

            if(hasme&&game.me){
                ui.handcards1=game.me.node.handcards1;
                ui.handcards2=game.me.node.handcards2;
                ui.handcards1Container.appendChild(ui.handcards1);
                ui.handcards2Container.appendChild(ui.handcards2);
                // ui.updatehl();
            }
            else if(game.players.length){
                game.me=game.players[0];
                ui.handcards1=game.me.node.handcards1;
                ui.handcards2=game.me.node.handcards2;
                ui.handcards1Container.appendChild(ui.handcards1);
                ui.handcards2Container.appendChild(ui.handcards2);
                // ui.updatehl();
            }
        },
        card:function(position,info,noclick){
            var node=ui.create.div('.card',position);
            node.node={
                image:ui.create.div('.image',node),
                info:ui.create.div('.info',node),
                name:ui.create.div('.name',node),
                name2:ui.create.div('.name2',node),
                background:ui.create.div('.background',node),
                intro:ui.create.div('.intro',node),
                range:ui.create.div('.range',node),
            }
            for(var i in lib.element.card){
                node[i]=lib.element.card[i];
            }
            node.node.intro.innerHTML=lib.config.intro;
            if(!noclick){
                lib.setIntro(node);
            }
            node.storage={};
            node.vanishtag=[];
            node._uncheck=[];
            if(info!='noclick'){
                node.addEventListener(lib.config.touchscreen?'touchend':'click',ui.click.card);
                if(lib.config.touchscreen){
                    node.addEventListener('touchstart',ui.click.cardtouchstart);
                    node.addEventListener('touchmove',ui.click.cardtouchmove);
                }
                if(lib.cardSelectObserver){
                    lib.cardSelectObserver.observe(node,{attributes:true});
                }
            }
            return node;
        },
        cardsAsync:function(){
            if(lib.onfree){
                _status.waitingForCards=Array.from(arguments);
                lib.onfree.push(function(){
                    if(_status.waitingForCards){
                        ui.create.cards.apply(ui.create,_status.waitingForCards);
                        delete _status.waitingForCards;
                    }
                });
            }
            else{
                ui.create.cards.apply(ui.create,arguments);
            }
        },
        cards:function(ordered){
            if(_status.brawl){
                if(_status.brawl.cardPile){
                    lib.card.list=_status.brawl.cardPile(lib.card.list);
                }
                if(_status.brawl.orderedPile){
                    ordered=true;
                }
            }
            if(!ordered){
                lib.card.list.randomSort();
            }
            for(var i=0;i<lib.card.list.length;i++){
                if(lib.card[lib.card.list[i][2]]){
                    if(!lib.card.list[i]._replaced){
                        if(!_status.connectMode){
                            if(lib.config.bannedcards.contains(lib.card.list[i][2])) continue;
                        }
                        else{
                            if(lib.configOL.bannedcards.contains(lib.card.list[i][2])) continue;
                        }
                        if(game.bannedcards&&game.bannedcards.contains(lib.card.list[i][2])) continue;
                    }
                    lib.inpile.add(lib.card.list[i][2]);
                    ui.create.card(ui.cardPile).init(lib.card.list[i]);
                }
            }
            lib.inpile.sort(lib.sort.card);
            game.broadcastAll(function(num){
                if(ui.cardPileNumber) ui.cardPileNumber.innerHTML='0轮 剩余牌: '+num;
            },ui.cardPile.childNodes.length);
        },
    },
    click:{
        identitycircle:function(){
            var list=[];
            this.classList.toggle('transparent');
            for(var i=0;i<this.parentNode.childNodes.length;i++){
                if(!this.parentNode.childNodes[i].classList.contains('transparent')){
                    list.add(this.parentNode.childNodes[i].link[2]);
                }
            }
            var info=this.link;
            if(list.length==1){
                for(var i=0;i<this.parentNode.childNodes.length;i++){
                    if(!this.parentNode.childNodes[i].classList.contains('transparent')){
                        var info2=this.parentNode.childNodes[i].link;
                        info[0].firstChild.innerHTML=info2[1];
                        info[0].dataset.color=info2[2];
                    }
                }
            }
            else{
                info[0].firstChild.innerHTML='';
                info[0].dataset.color='';
                ui.create.identitycircle(list,info[0].firstChild);
            }
            this._source._guozhanguess=list;
        },
        connectEvents:function(){
            if(this.info){
                var button=this;
                var layer=ui.create.div('.poplayer',ui.window);
                var uiintro=ui.create.dialog('hidden','notouchscroll');
                this.classList.add('active');
                if(lib.config.touchscreen){
                    lib.setScroll(uiintro.contentContainer);
                }
                layer.listen(function(){
                    if(this.clicked){
                        this.clicked=false;
                        return;
                    }
                    button.classList.remove('active');
                    uiintro.delete();
                    this.delete();
                });
                uiintro.listen(function(){
                    _status.clicked=true;
                });
                uiintro.style.zIndex=21;
                uiintro.classList.add('popped');
                uiintro.classList.add('static');
                uiintro.classList.add('onlineclient');
                uiintro.style.width='180px';
                uiintro.style.height='300px';
                uiintro.style.left='auto';
                uiintro.style.right='20px';
                uiintro.style.top='auto';
                uiintro.style.bottom='75px';

                uiintro.refresh=function(){
                    if(button.focused) return;
                    uiintro.content.innerHTML='';
                    uiintro.addText('创建约战');
                    button.textnode=uiintro.content.lastChild.lastChild;
                    uiintro.add('<input type="text" style="width:calc(100% - 10px);resize: none;border: none;border-radius: 2px;box-shadow: rgba(0, 0, 0, 0.2) 0px 0px 0px 1px;margin-top: -2px;margin-bottom: 2px;">');
                    uiintro.content.lastChild.style.paddingTop=0;
                    button.input=uiintro.content.lastChild.lastChild;
                    button.input.onfocus=function(){
                        button.focused=true;
                    }
                    button.input.onblur=function(){
                        delete button.focused;
                    }
                    if(button.interval){
                        button.input.disabled=true;
                        button.input.style.opacity=0.6;
                        if(button.intervaltext){
                            button.textnode.innerHTML=button.intervaltext;
                        }
                    }
                    var datenode=ui.create.div(uiintro.content);
                    datenode.style.marginTop=0;
                    datenode.style.whiteSpace='nowrap';
                    var date=new Date();
                    var days=[];
                    var currentDay=date.getDay();
                    if(currentDay==0) currentDay=7;
                    for(var i=1;i<=7;i++){
                        if(i<currentDay){
                            days.push([i.toString(),'下周'+get.cnNumber(i,true)]);
                        }
                        else if(i==7){
                            days.push([i.toString(),'周日']);
                        }
                        else if(i==currentDay){
                            days.push([i.toString(),'今天']);
                        }
                        else{
                            days.push([i.toString(),'周'+get.cnNumber(i,true)]);
                        }
                    }
                    days=days.concat(days.splice(0,currentDay-1));
                    var initday=currentDay+1;
                    if(initday>7){
                        initday-=7;
                    }
                    var daysselect=ui.create.selectlist(days,initday.toString(),datenode);
                    daysselect.style.width='55px';
                    var hours=[];
                    for(var i=0;i<24;i++){
                        hours.push([i.toString(),i.toString()+'点']);
                    }
                    var hoursselect=ui.create.selectlist(hours,date.getHours().toString(),datenode);
                    hoursselect.style.marginLeft='5px';
                    hoursselect.style.width='55px';
                    var timeconfirm=ui.create.node('button','确定',datenode);
                    timeconfirm.style.marginLeft='5px';
                    timeconfirm.onclick=function(){
                        if(!button.input.value){
                            alert('请填写约战标题');
                            return;
                        }
                        var date2=new Date();
                        date2.setHours(parseInt(hoursselect.value));
                        date2.setMinutes(0);
                        date2.setSeconds(0);
                        var deltaday=parseInt(daysselect.value)-currentDay;
                        if(deltaday<0){
                            deltaday+=7;
                        }
                        var utc=date2.getTime()+deltaday*24*3600000;
                        if(utc<date.getTime()){
                            alert('创建失败，时间已过');
                            return;
                        }
                        game.send('server','events',{
                            utc:utc,
                            day:parseInt(daysselect.value),
                            hour:parseInt(hoursselect.value),
                            nickname:lib.config.connect_nickname,
                            avatar:lib.config.connect_avatar,
                            content:button.input.value
                        },game.onlineKey);
                    };

                    var num=0;
                    for(var i=0;i<button.info.length;i++){
                        if(button.info[i].creator==game.onlineKey&&button.info[i].members.contains(game.onlineKey)){
                            num++;
                        }
                        var eventnode=ui.create.div('.menubutton.videotext.onlineevent.pointerdiv',function(){
                            var that=this;
                            setTimeout(function(){
                                if(that.classList.contains('active')){
                                    if(confirm('确定要离开'+that.info.content+'？')){
                                        game.send('server','events',that.info.id,game.onlineKey,'leave');
                                    }
                                }
                                else{
                                    if(confirm('确定要加入'+that.info.content+'？')){
                                        game.send('server','events',that.info.id,game.onlineKey,'join');
                                    }
                                }
                            });
                        },uiintro.content);
                        eventnode.info=button.info[i];
                        ui.create.div('.title',button.info[i].content,eventnode);
                        var str;
                        if(button.info[i].day<currentDay){
                            str='下周';
                        }
                        else{
                            str='周';
                        }
                        if(button.info[i].day==7){
                            str+='日'
                        }
                        else{
                            str+=get.cnNumber(button.info[i].day,true);
                        }
                        str+=' ';
                        var hour=button.info[i].hour;
                        if(hour<=12){
                            if(hour<=5){
                                str+='凌晨';
                            }
                            else if(hour<12){
                                str+='上午';
                            }
                            else{
                                str+='中午';
                            }
                            str+=button.info[i].hour+'点';
                        }
                        else{
                            if(hour<=17){
                                str+='下午';
                            }
                            else{
                                str+='晚上';
                            }
                            str+=(button.info[i].hour-12)+'点';
                        }
                        ui.create.div('','已有'+(button.info[i].members.length)+'人加入',eventnode);
                        ui.create.div('','时间：'+str,eventnode);
                        if(button.info[i].members.contains(game.onlineKey)){
                            eventnode.classList.add('active');
                        }
                    }
                    if(num>=3){
                        button.input.disabled=true;
                        button.input.style.opacity=0.6;
                        hoursselect.disabled=true;
                        daysselect.disabled=true;
                        timeconfirm.disabled=true;
                    }
                }
                uiintro.refresh();
                ui.window.appendChild(uiintro);
                _status.connectEventsCallback=function(){
                    if(uiintro.parentNode==ui.window){
                        uiintro.refresh();
                    }
                };
            }
        },
        connectClients:function(){
            if(this.info){
                var button=this;
                var layer=ui.create.div('.poplayer',ui.window);
                var uiintro=ui.create.dialog('hidden','notouchscroll');
                this.classList.add('active');
                if(lib.config.touchscreen){
                    lib.setScroll(uiintro.contentContainer);
                }
                layer.listen(function(){
                    if(this.clicked){
                        this.clicked=false;
                        return;
                    }
                    button.classList.remove('active');
                    uiintro.delete();
                    this.delete();
                });
                uiintro.listen(function(){
                    _status.clicked=true;
                });
                uiintro.style.zIndex=21;
                uiintro.classList.add('popped');
                uiintro.classList.add('static');
                uiintro.classList.add('onlineclient');
                uiintro.style.width='180px';
                uiintro.style.height='300px';
                uiintro.style.left='auto';
                uiintro.style.right='20px';
                uiintro.style.top='auto';
                uiintro.style.bottom='75px';

                uiintro.refresh=function(){
                    if(button.focused) return;
                    uiintro.content.innerHTML='';
                    uiintro.addText('发状态');
                    button.textnode=uiintro.content.lastChild.lastChild;
                    uiintro.add('<input type="text" style="width:calc(100% - 10px);resize: none;border: none;border-radius: 2px;box-shadow: rgba(0, 0, 0, 0.2) 0px 0px 0px 1px;margin-top: -2px;margin-bottom: 2px;">');
                    uiintro.content.lastChild.style.paddingTop=0;
                    button.input=uiintro.content.lastChild.lastChild;
                    button.input.onfocus=function(){
                        button.focused=true;
                    }
                    button.input.onblur=function(){
                        delete button.focused;
                    }
                    if(button.interval){
                        button.input.disabled=true;
                        button.input.style.opacity=0.6;
                        if(button.intervaltext){
                            button.textnode.innerHTML=button.intervaltext;
                        }
                    }
                    button.input.onkeydown=function(e){
                        if(e.keyCode==13&&!this.disabled){
                            game.send('server','status',this.value);
                            this.blur();
                            this.disabled=true;
                            this.style.opacity=0.6;
                            button.textnode.innerHTML='发状态(10)';
                            button.intervaltext=button.textnode.innerHTML;
                            var num=10;
                            var that=this;
                            button.input.disabled=true;
                            button.input.style.opacity=0.6;
                            this.value='';
                            button.interval=setInterval(function(){
                                num--;
                                if(num>0){
                                    button.textnode.innerHTML='发状态('+num+')';
                                    button.intervaltext=button.textnode.innerHTML;
                                }
                                else{
                                    button.textnode.innerHTML='发状态';
                                    button.input.disabled=false;
                                    button.input.style.opacity='';
                                    clearInterval(button.interval);
                                    delete button.interval;
                                    delete button.intervaltext;
                                }
                            },1000);
                        }
                    }

                    for(var i=0;i<button.info.length;i++){
                        var node=ui.create.div('.menubutton.videonode.pointerdiv',uiintro.content);
                        ui.create.div('.menubutton.videoavatar',node).setBackground(button.info[i][1]||'caocao','character');
                        if(button.info[i][4]==game.wsid){
                            ui.create.div('.name','<span class="thundertext thunderauto">'+(button.info[i][0]||'无名玩家'),node);node.isme=true;
                        }
                        else if(button.info[i][2]){
                            ui.create.div('.name',(button.info[i][0]||'无名玩家'),node);
                        }
                        else{
                            ui.create.div('.name','<span style="opacity:0.6">'+(button.info[i][0]||'无名玩家'),node);
                        }
                        if(button.info[i][3]){
                            ui.create.div('.videostatus',node,button.info[i][3].slice(0,80));
                            node.classList.add('videonodestatus')
                        }
                    }
                };

                uiintro.refresh();
                ui.window.appendChild(uiintro);
                _status.connectClientsCallback=function(){
                    if(uiintro.parentNode==ui.window){
                        uiintro.refresh();
                    }
                };
            }
        },
        autoskin:function(){
            if(!lib.config.change_skin) return;
            var players=game.filterPlayer();
            var change=function(player,num,callback){
                if(num=='1'){
                    ui.click.skin(player.node.avatar,player.name,callback);
                }
                else{
                    ui.click.skin(player.node.avatar2,player.name2,callback);
                }
            };
            var finish=function(){
                if(lib.config.change_skin_auto!='off'){
                    _status.skintimeout=setTimeout(ui.click.autoskin,parseInt(lib.config.change_skin_auto));
                }
            };
            var autoskin=function(){
                if(players.length){
                    var player=players.randomRemove();
                    var list=[];
                    if(player.name&&!player.isUnseen(0)){
                        list.push('1');
                    }
                    if(player.name2&&!player.isUnseen(1)){
                        list.push('2');
                    }
                    if(list.length){
                        change(player,list.randomRemove(),function(bool){
                            if(bool){
                                finish();
                            }
                            else if(list.length){
                                change(player,list[0],function(bool){
                                    if(bool){
                                        finish();
                                    }
                                    else{
                                        autoskin();
                                    }
                                });
                            }
                            else{
                                autoskin();
                            }
                        });
                    }
                    else{
                        autoskin();
                    }
                }
            }
            autoskin();
        },
        skin:function(avatar,name,callback){
            var num=1;
            if(name.indexOf('gz_')==0){
                name=name.slice(3);
            }
            if(lib.config.skin[name]){
                num=lib.config.skin[name]+1;
            }
            var fakeavatar=avatar.cloneNode(true);
            var finish=function(bool){
                var player=avatar.parentNode;
                if(bool){
                    fakeavatar.style.boxShadow='none';
                    player.insertBefore(fakeavatar,avatar.nextSibling);
                    setTimeout(function(){
                        fakeavatar.delete();
                    },100);
                }
                if(bool&&lib.config.animation&&!lib.config.low_performance){
                    player.$rare();
                }
                if(callback){
                    callback(bool);
                }
            }
            var img=new Image();
            img.onload=function(){
                lib.config.skin[name]=num;
                game.saveConfig('skin',lib.config.skin);
                avatar.style.backgroundImage='url("'+img.src+'")';
                finish(true);
            }
            img.onerror=function(){
                if(lib.config.skin[name]){
                    finish(true);
                }
                else{
                    finish(false);
                }
                delete lib.config.skin[name];
                game.saveConfig('skin',lib.config.skin);
                avatar.setBackground(name,'character');
            }
            img.src=lib.assetURL+'image/skin/'+name+'/'+num+'.jpg';
        },
        touchpop:function(forced){
            if(lib.config.touchscreen||forced){
                _status.touchpopping=true;
                clearTimeout(_status.touchpoppingtimeout);
                _status.touchpoppingtimeout=setTimeout(function(){
                    _status.touchpopping=false;
                },600);
            }
        },
        exit:function(){
            if(game.servermode&&lib.config.reconnect_info&&_status.over){
                if(!_status.roomtimeout){
                    lib.config.reconnect_info[2]=game.roomId;
                    game.saveConfig('reconnect_info',lib.config.reconnect_info);
                }
                game.reload();
                return;
            }
            else{
                if(typeof game.roomId!='number'){
                    game.saveConfig('reconnect_info');
                }
            }
            if(!ui.exit||!ui.exit.stay){
                if(lib.config.reconnect_info){
                    lib.config.reconnect_info.length=1;
                    game.saveConfig('reconnect_info',lib.config.reconnect_info);
                }
                game.saveConfig('tmp_user_roomId',undefined,false,function(){
                    game.reload();
                });
            }
            else{
                game.reload();
            }
        },
        shortcut:function(show){
            if(show===false){
                ui.shortcut.classList.add('hidden');
            }
            else{
                ui.shortcut.classList.toggle('hidden');
            }
            if(ui.shortcut.classList.contains('hidden')){
                ui.favmode.style.display='none';
                if(window.StatusBar&&lib.config.show_statusbar_ios=='auto'){
                    document.body.classList.remove('statusbar');
                    window.StatusBar.hide();
                }
                ui.window.classList.remove('shortcutpaused');
            }
            else{
                if(lib.config.show_favmode){
                    ui.favmode.style.display='';
                }
                if(window.StatusBar&&lib.config.show_statusbar_ios=='auto'){
                    document.body.classList.add('statusbar');
                    window.StatusBar.overlaysWebView(true);
                    window.StatusBar.backgroundColorByName('black');
                    window.StatusBar.show();
                }
                if(_status.auto){
                    ui.shortcut.autobutton.classList.add('active');
                }
                else{
                    ui.shortcut.autobutton.classList.remove('active');
                }
                ui.window.classList.add('shortcutpaused');
            }
        },
        favouriteCharacter:function(e){
            if(typeof this.link=='string'){
                if(this.innerHTML=='添加收藏'){
                    this.innerHTML='移除收藏';
                    lib.config.favouriteCharacter.add(this.link);
                }
                else{
                    this.innerHTML='添加收藏';
                    lib.config.favouriteCharacter.remove(this.link);
                }
                if(ui.favouriteCharacter){
                    if(lib.config.favouriteCharacter.contains(this.link)){
                        for(var i=0;i<ui.favouriteCharacter.childElementCount;i++){
                            if(ui.favouriteCharacter.childNodes[i].link==this.link){
                                break;
                            }
                        }
                        if(i==ui.favouriteCharacter.childElementCount){
                            ui.create.button(this.link,'character',ui.favouriteCharacter).listen(function(e){
                                this._banning='offline';
                                ui.click.touchpop();
                                ui.click.intro.call(this,e);
                                _status.clicked=false;
                                delete this._banning;
                            }).classList.add('noclick');
                        }
                    }
                    else{
                        for(var i=0;i<ui.favouriteCharacter.childElementCount;i++){
                            if(ui.favouriteCharacter.childNodes[i].link==this.link){
                                ui.favouriteCharacter.childNodes[i].remove();
                                break;
                            }
                        }
                    }
                    var shownode=false;
                    for(var i=0;i<lib.config.favouriteCharacter.length;i++){
                        var favname=lib.config.favouriteCharacter[i];
                        if(lib.character[favname]){
                            shownode=true;break;
                        }
                    }
                    if(shownode){
                        ui.favouriteCharacter.node.style.display='';
                    }
                    else{
                        ui.favouriteCharacter.node.style.display='none';
                    }
                }
                game.saveConfig('favouriteCharacter',lib.config.favouriteCharacter);
            }
            e.stopPropagation();
        },
        buttonnameenter:function(){
            if(this.buttonscrollinterval){
                clearInterval(this.buttonscrollinterval);
            }
            var node=this.node.name;
            if(node.offsetHeight<node.scrollHeight){
                var that=this;
                var num=40;
                that.buttonscrollinterval=setInterval(function(){
                    if(node.scrollTop+node.offsetHeight>=node.scrollHeight){
                        clearInterval(that.buttonscrollinterval);
                        delete that.buttonscrollinterval;
                    }
                    else{
                        if(num>0){
                            num--;
                        }
                        else{
                            node.scrollTop+=2;
                        }
                    }
                },16);
            }
        },
        buttonnameleave:function(){
            if(this.buttonscrollinterval){
                clearInterval(this.buttonscrollinterval);
            }
            var node=this.node.name;
            if(node.offsetHeight<node.scrollHeight){
                var that=this;
                that.buttonscrollinterval=setInterval(function(){
                    if(node.scrollTop==0){
                        clearInterval(that.buttonscrollinterval);
                        delete that.buttonscrollinterval;
                    }
                    else{
                        node.scrollTop-=2;
                    }
                },16);
            }
        },
        dragtouchdialog:function(e){
            if(e.touches.length>1&&
                !this.classList.contains('popped')&&
                !this.classList.contains('fixed')){
                _status.draggingtouchdialog=this;
                this._dragorigin={
                    clientX:e.touches[0].clientX,
                    clientY:e.touches[0].clientY,
                };
                if(!this._dragtransform){
                    this._dragtransform=[0,0];
                }
                this._dragorigintransform=this._dragtransform.slice(0);
                e.preventDefault();
                e.stopPropagation();
            }
        },
        identity:function(e){
            if(_status.dragged) return;
            _status.clicked=true;
            if(!game.getIdentityList) return;
            if(_status.video) return;
            if(this.parentNode.forceShown) return;
            if(_status.clickingidentity){
                for(var i=0;i<_status.clickingidentity[1].length;i++){
                    _status.clickingidentity[1][i].delete();
                    _status.clickingidentity[1][i].style.transform='';
                }
                if(_status.clickingidentity[0]==this.parentNode){
                    delete _status.clickingidentity;
                    return;
                }
            }
            var list=game.getIdentityList(this.parentNode);
            if(!list) return;
            if(lib.config.mark_identity_style=='click'){
                var list2=[];
                for(var i in list){
                    list2.push(i);
                }
                list2.push(list2[0]);
                for(var i=0;i<list2.length;i++){
                    if(this.firstChild.innerHTML==list[list2[i]]){
                        this.firstChild.innerHTML=list[list2[i+1]];
                        this.dataset.color=list2[i+1];
                        break;
                    }
                }
            }
            else{
                if(get.mode()=='guozhan'){
                    list={wei:'魏',shu:'蜀',wu:'吴',qun:'群'};
                }
                var list2=get.copy(list);
                if(game.getIdentityList2){
                    game.getIdentityList2(list2);
                }
                var rect=this.parentNode.getBoundingClientRect();
                this._customintro=function(uiintro){
                    if(get.mode()=='guozhan'){
                        uiintro.clickintro=true;
                    }
                    else{
                        uiintro.touchclose=true;
                    }
                    // if(lib.config.theme!='woodden'){
                    uiintro.classList.add('woodbg');
                    // }
                    if(get.is.phoneLayout()){
                        uiintro.style.width='100px';
                    }
                    else{
                        uiintro.style.width='85px';
                    }
                    var source=this.parentNode;
                    for(var i in list){
                        var node=ui.create.div();
                        node.classList.add('guessidentity');
                        node.classList.add('pointerdiv');
                        ui.create.div('.menubutton.large',list2[i],node);
                        if(!get.is.phoneLayout()){
                            node.firstChild.style.fontSize='24px';
                            node.firstChild.style.lineHeight='24px';
                        }
                        if(get.mode()=='guozhan'){
                            if(source._guozhanguess){
                                if(!source._guozhanguess.contains(i)){
                                    node.classList.add('transparent');
                                }
                            }
                            node._source=source;
                            node.listen(ui.click.identitycircle);
                        }
                        else{
                            node.listen(function(){
                                var info=this.link;
                                info[0].firstChild.innerHTML=info[1];
                                info[0].dataset.color=info[2];
                                _status.clicked=false;
                            });
                        }

                        node.link=[this,list[i],i];
                        uiintro.add(node);
                    }
                };
                ui.click.touchpop();
                ui.click.intro.call(this,{
                    clientX:(rect.left+rect.width)*game.documentZoom,
                    clientY:(rect.top)*game.documentZoom
                });
                // var nodes=[];
                // _status.clickingidentity=[this.parentNode,nodes];
                // var num=1;
                // var dy=30;
                // if(get.is.phoneLayout()){
                // 	dy=45;
                // }
                // for(var i in list){
                // 	if(this.firstChild.innerHTML!=list[i]){
                // 		var node=ui.create.div('.identity.hidden.pointerdiv',this.parentNode,ui.click.identity2);
                // 		ui.create.div(node).innerHTML=list[i];
                // 		node.dataset.color=i;
                // 		ui.refresh(node);
                // 		node.show();
                // 		var transstr='translateY('+((num++)*dy)+'px)';
                // 		if(get.is.phoneLayout()){
                // 			transstr+=' scale(1.3)';
                // 		}
                // 		if(get.is.newLayout()&&this.parentNode.classList.contains('linked')){
                // 			transstr+=' rotate(90deg)';
                // 		}
                // 		node.style.transform=transstr;
                // 		nodes.push(node);
                // 	}
                // }
            }
        },
        identity2:function(){
            if(_status.clickingidentity){
                _status.clicked=true;
                var player=_status.clickingidentity[0];
                var nodes=_status.clickingidentity[1];
                player.node.identity.dataset.color=this.dataset.color;
                player.node.identity.firstChild.innerHTML=this.firstChild.innerHTML;
                for(var i=0;i<nodes.length;i++){
                    nodes[i].delete();
                    nodes[i].style.transform='';
                }
                delete _status.clickingidentity;
            }
        },
        roundmenu:function(){
            game.closeConnectMenu();
            switch(lib.config.round_menu_func){
                case 'system':
                    game.closePopped();
                    ui.system1.classList.add('shown');
                    ui.system2.classList.add('shown');
                    game.closeMenu();
                    ui.click.shortcut();
                    break;
                case 'menu':
                    if(ui.click.configMenu){
                        game.closePopped();
                        game.pause2();
                        ui.click.configMenu();
                        ui.system1.classList.remove('shown');
                        ui.system2.classList.remove('shown');
                    }
                    break;
                case 'pause':
                    ui.click.pause();
                    break;
                case 'auto':
                    ui.click.auto();
                    break;
            }
            _status.clicked=true;
        },
        pausehistory:function(){
            if(!lib.config.auto_popped_history) return;
            if(!ui.sidebar.childNodes.length) return;
            var uiintro=ui.create.dialog('hidden');
            uiintro.style.maxHeight='400px';
            uiintro.add(ui.sidebar);
            return uiintro;
        },
        pauseconfig:function(){
            if(!lib.config.auto_popped_config) return;
            if(get.is.phoneLayout()) return;
            var uiintro=ui.create.dialog('hidden');
            uiintro.listen(function(e){
                e.stopPropagation();
            });

            var rows=Math.floor(lib.config.all.mode.length/3);
            uiintro.type='config';
            var modes=lib.config.modeorder||lib.config.all.mode.slice(0);
            for(var i=0;i<modes.length;i++){
                if(!lib.config.all.mode.contains(modes[i])){
                    modes.splice(i--,1);
                }
            }
            for(var k=0;k<rows;k++){
                var node=ui.create.div('.newgame.pointernode');
                for(var i=0;i<3&&i+k*3<modes.length;i++){
                    var thismode=modes[i+k*3];
                    var div=ui.create.div(thismode==(_status.sourcemode||lib.config.mode)?'.underlinenode.on':'.underlinenode',node);
                    div.innerHTML=lib.translate[thismode];
                    div.link=thismode;
                    div.addEventListener(lib.config.touchscreen?'touchend':'click',function(){
                        game.saveConfig('mode',this.link);
                        localStorage.setItem(lib.configprefix+'directstart',true);
                        game.reload();
                    });
                }
                uiintro.add(node);
            }

            return uiintro;
        },
        cardPileButton:function(){
            var uiintro=ui.create.dialog('hidden');
            uiintro.listen(function(e){
                e.stopPropagation();
            });
            var num;
            if(game.online){
                num=_status.cardPileNum||0;
            }
            else{
                num=ui.cardPile.childNodes.length;
            }
            uiintro.add('剩余 <span style="font-family:'+'xinwei'+'">'+num);

            if(_status.connectMode) return uiintro;
            uiintro.add('<div class="text center">轮数 <span style="font-family:xinwei">'+game.roundNumber+'</span>&nbsp;&nbsp;&nbsp;&nbsp;洗牌 <span style="font-family:xinwei">'+game.shuffleNumber+'</div>');
            uiintro.add('<div class="text center">弃牌堆</div>');
            if(ui.discardPile.childNodes.length){
                var list=[];
                for(var i=0;i<ui.discardPile.childNodes.length;i++){
                    list.unshift(ui.discardPile.childNodes[i]);
                }
                uiintro.addSmall([list,'card']);
            }
            else{
                uiintro.add('<div class="text center" style="padding-bottom:3px">无</div>');
            }
            return uiintro;
        },
        chat:function(){
            ui.system1.classList.add('shown');
            ui.system2.classList.add('shown');

            var uiintro=ui.create.dialog('hidden');
            uiintro.listen(function(e){
                e.stopPropagation();
            });

            var list=ui.create.div('.caption');
            if(get.is.phoneLayout()){
                list.style.maxHeight='250px';
            }
            else{
                list.style.maxHeight='350px';
            }
            list.style.overflow='scroll';
            lib.setScroll(list);
            uiintro.contentContainer.style.overflow='hidden';

            var input;
            var addEntry=function(info,clear){
                if(list._chatempty){
                    list.innerHTML='';
                    delete list._chatempty;
                }
                var node=ui.create.div('.text.chat');
                node.innerHTML=info[0]+': '+info[1];
                list.appendChild(node);
                list.scrollTop=list.scrollHeight;
                uiintro.style.height=uiintro.content.scrollHeight+'px';
            }
            _status.addChatEntry=addEntry;
            _status.addChatEntry._origin=uiintro;
            if(lib.chatHistory.length){
                for(var i=0;i<lib.chatHistory.length;i++){
                    addEntry(lib.chatHistory[i]);
                }
            }
            else{
                list._chatempty=true;
                list.appendChild(ui.create.div('.text.center','无聊天记录'))
            }
            uiintro.add(list);
            uiintro.style.height=uiintro.content.offsetHeight+'px';
            list.scrollTop=list.scrollHeight;

            var node=uiintro.add('<input type="text" value="">');
            node.style.paddingTop=0;
            node.style.marginBottom='16px';
            input=node.firstChild;
            input.style.width='calc(100% - 20px)';
            input.onkeydown=function(e){
                if(e.keyCode==13&&input.value){
                    var player=game.me;
                    var str=input.value;
                    if(!player){
                        if(game.connectPlayers){
                            if(game.online){
                                for(var i=0;i<game.connectPlayers.length;i++){
                                    if(game.connectPlayers[i].playerid==game.onlineID){
                                        player=game.connectPlayers[i];break;
                                    }
                                }
                            }
                            else{
                                player=game.connectPlayers[0];
                            }
                        }
                    }
                    if(!player) return;
                    if(game.online){
                        game.send('chat',game.onlineID,str);
                    }
                    else{
                        lib.element.player.chat.call(player,str);
                    }
                    input.value='';
                }
                e.stopPropagation();
            }
            uiintro._onopen=function(){
                input.focus();
                list.scrollTop=list.scrollHeight;
            };
            uiintro._heightfixed=true;
            return uiintro;
        },
        volumn:function(){
            var uiintro=ui.create.dialog('hidden');
            uiintro.listen(function(e){
                e.stopPropagation();
            });
            uiintro.add('背景音乐');
            var vol1=ui.create.div('.volumn');
            uiintro.add(vol1);
            for(var i=0;i<8;i++){
                var span=document.createElement('span');
                span.link=i+1;
                span.addEventListener(lib.config.touchscreen?'touchend':'click',ui.click.volumn_background);
                if(i<lib.config.volumn_background){
                    span.innerHTML='●';
                }
                else{
                    span.innerHTML='○';
                }
                vol1.appendChild(span);
            }
            uiintro.add('游戏音效');

            var vol2=ui.create.div('.volumn');
            uiintro.add(vol2);
            for(var i=0;i<8;i++){
                var span=document.createElement('span');
                span.link=i+1;
                span.addEventListener(lib.config.touchscreen?'touchend':'click',ui.click.volumn_audio);
                if(i<lib.config.volumn_audio){
                    span.innerHTML='●';
                }
                else{
                    span.innerHTML='○';
                }
                vol2.appendChild(span);
            }
            uiintro.add(ui.create.div('.placeholder'));
            return uiintro;
        },
        volumn_background:function(e){
            if(_status.dragged) return;
            var volume=this.link;
            if(volume===1&&lib.config.volumn_background===1){
                volume=0;
            }
            game.saveConfig('volumn_background',volume);
            ui.backgroundMusic.volume=volume/8;
            for(var i=0;i<8;i++){
                if(i<lib.config.volumn_background){
                    this.parentNode.childNodes[i].innerHTML='●';
                }
                else{
                    this.parentNode.childNodes[i].innerHTML='○';
                }
            }
            e.stopPropagation();
        },
        volumn_audio:function(e){
            if(_status.dragged) return;
            var volume=this.link;
            if(volume===1&&lib.config.volumn_audio===1){
                volume=0;
            }
            game.saveConfig('volumn_audio',volume);
            for(var i=0;i<8;i++){
                if(i<lib.config.volumn_audio){
                    this.parentNode.childNodes[i].innerHTML='●';
                }
                else{
                    this.parentNode.childNodes[i].innerHTML='○';
                }
            }
            e.stopPropagation();
        },
        hoverpopped:function(){
            if(this._uiintro){
                return;
            }
            if(!this._poppedfunc){
                return;
            }
            ui.click.touchpop(this.forceclick);
            var uiintro=this._poppedfunc();
            if(!uiintro) return;
            if(ui.currentpopped&&ui.currentpopped._uiintro){
                ui.currentpopped._uiintro.delete();
                delete ui.currentpopped._uiintro;
            }
            ui.currentpopped=this;
            uiintro.classList.add('popped');
            uiintro.classList.add('hoverdialog');
            uiintro.classList.add('static');
            this._uiintro=uiintro;

            ui.window.appendChild(uiintro);
            var width=this._poppedwidth||330;
            uiintro.style.width=width+'px';
            if(get.is.phoneLayout()){
                width*=1.3;
            }

            if(uiintro._heightfixed){
                uiintro.style.height=uiintro.content.scrollHeight+'px';
            }
            else{
                var height=this._poppedheight||uiintro.content.scrollHeight;
                var height2=ui.window.offsetHeight-260;
                if(get.is.phoneLayout()){
                    height2=(ui.window.offsetHeight-80)/1.3;
                }
                uiintro.style.height=Math.min(height2,height)+'px';
            }
            if(get.is.phoneLayout()){
                uiintro.style.top='70px';
            }
            else{
                uiintro.style.top='50px';
            }
            var left=this.parentNode.offsetLeft+this.offsetLeft+this.offsetWidth/2-width/2;
            if(left<10){
                left=10;
            }
            else if(left+width>ui.window.offsetWidth-10){
                left=ui.window.offsetWidth-width-10;
            }
            uiintro.style.left=left+'px';
            uiintro._poppedorigin=this;
            if(!lib.config.touchscreen){
                uiintro.addEventListener('mouseleave',ui.click.leavehoverpopped);
            }
            ui.click.shortcut(false);
            if(uiintro._onopen){
                uiintro._onopen();
            }
            if(this._paused2&&!lib.config.touchscreen){
                game.pause2();
                uiintro.classList.add('static');
                var layer=ui.create.div('.poplayer',ui.window);
                var clicklayer=function(e){
                    uiintro.delete();
                    layer.remove();
                    game.resume2();
                    e.stopPropagation();
                    return false;
                }
                uiintro.style.zIndex=21;
                layer.onclick=clicklayer;
                layer.oncontextmenu=clicklayer;
                uiintro.addEventListener('mouseleave',clicklayer);
                uiintro.addEventListener('click',clicklayer);
            }
        },
        hoverpopped_leave:function(){
            this._poppedalready=false;
        },
        leavehoverpopped:function(){
            if(_status.dragged) return;
            if(this.classList.contains('noleave')) return;
            this.delete();
            var button=this._poppedorigin;

            var uiintro=this;
            setTimeout(function(){
                if(button._uiintro==uiintro){
                    delete button._uiintro;
                }
            },500);

        },
        dierevive:function(){
            if(game.me.isDead()){
                game.me.revive(Math.max(1,game.me.maxHp));
                game.me.draw(2);
            }
            else{
                if(ui.revive){
                    ui.revive.close();
                    delete ui.revive;
                }
            }
        },
        dieswap:function(){
            if(game.me.isDead()){
                _status.clicked=true;
                var i,translation,intro,str;
                if(ui.intro){
                    ui.intro.close();
                    if(ui.intro.source=='dieswap'){
                        delete ui.intro;
                        ui.control.show();
                        game.resume2();
                        return;
                    }
                }
                game.pause2();
                ui.control.hide();
                ui.intro=ui.create.dialog();
                ui.intro.source='dieswap';

                var players=[];
                for(var i=0;i<game.players.length;i++){
                    if(game.players[i].isAlive()){
                        players.push(game.players[i]);
                    }
                }
                ui.intro.add(players,true);
                var buttons=ui.intro.querySelectorAll('.button');
                for(var i=0;i<buttons.length;i++){
                    buttons[i].addEventListener(lib.config.touchscreen?'touchend':'click',ui.click.dieswap2);
                }
            }
            else{
                if(ui.swap){
                    ui.swap.close();
                    delete ui.swap;
                }
            }
        },
        dieswap2:function(){
            if(_status.dragged) return;
            game.swapPlayer(this.link);
        },
        touchconfirm:function(){
            _status.touchconfirmed=true;
            document.removeEventListener('touchstart',ui.click.touchconfirm);
        },
        windowtouchstart:function(e){
            if(window.inSplash) return;
            if(e.touches[0]&&lib.config.swipe&&e.touches.length<2){
                _status._swipeorigin={
                    clientX:e.touches[0].clientX,
                    clientY:e.touches[0].clientY,
                    time:get.utc()
                }
            }
            // if(window.ForceTouch&&!_status.paused2&&!_status.forcetouchinterval&&lib.config.enable_pressure){
            // 	_status.forcetouchinterval=setInterval(ui.click.forcetouch,30);
            // }
        },
        windowtouchmove:function(e){
            e.preventDefault();
            if(window.inSplash) return;
            if(_status.draggingroundmenu){
                delete _status._swipeorigin;
                if(ui.roundmenu._dragorigin&&ui.roundmenu._dragtransform&&e.touches.length){
                    var translate=ui.roundmenu._dragtransform.slice(0);
                    var dx=e.touches[0].clientX/game.documentZoom-ui.roundmenu._dragorigin.clientX/game.documentZoom;
                    var dy=e.touches[0].clientY/game.documentZoom-ui.roundmenu._dragorigin.clientY/game.documentZoom;
                    translate[0]+=dx;
                    translate[1]+=dy;
                    if(dx*dx+dy*dy>100){
                        if(ui.roundmenu._resetTimeout){
                            clearTimeout(ui.roundmenu._resetTimeout);
                            delete ui.roundmenu._resetTimeout;
                        }
                    }
                    ui.roundmenu._dragtouches=e.touches[0];
                    ui.click.checkroundtranslate(translate);
                }
                _status.clicked=true;
            }
            else if(_status.draggingtouchdialog){
                delete _status._swipeorigin;
                if(_status.draggingtouchdialog._dragorigin&&_status.draggingtouchdialog._dragtransform&&e.touches.length){
                    var translate=_status.draggingtouchdialog._dragtransform.slice(0);
                    var dx=e.touches[0].clientX/game.documentZoom-_status.draggingtouchdialog._dragorigin.clientX/game.documentZoom;
                    var dy=e.touches[0].clientY/game.documentZoom-_status.draggingtouchdialog._dragorigin.clientY/game.documentZoom;
                    translate[0]+=dx;
                    translate[1]+=dy;
                    _status.draggingtouchdialog._dragtouches=e.touches[0];
                    ui.click.checkdialogtranslate(translate,_status.draggingtouchdialog);
                }
                _status.clicked=true;
            }
            else if(_status._swipeorigin&&e.touches[0]){
                _status._swipeorigin.touches=e.touches[0];
            }

            if(_status.mousedragging&&e.touches.length){
                e.preventDefault();
                var item=document.elementFromPoint(e.touches[0].clientX,e.touches[0].clientY);
                if(game.chess&&ui.selected.cards.length){
                    var itemtype=get.itemtype(item);
                    if(itemtype!='card'&&itemtype!='button'){
                        var ex=e.touches[0].clientX/game.documentZoom-ui.arena.offsetLeft;
                        var ey=e.touches[0].clientY/game.documentZoom-ui.arena.offsetTop;
                        for(var i=0;i<game.players.length;i++){
                            var left=-ui.chessContainer.chessLeft+ui.chess.offsetLeft+game.players[i].getLeft();
                            var top=-ui.chessContainer.chessTop+ui.chess.offsetTop+game.players[i].getTop();
                            var width=game.players[i].offsetWidth;
                            var height=game.players[i].offsetHeight;
                            if(ex>left&&ex<left+width&&ey>top&&ey<top+height){
                                item=game.players[i];
                                break;
                            }
                        }
                    }
                }
                while(item){
                    if(lib.config.enable_touchdragline&&_status.mouseleft&&!game.chess){
                        ui.canvas.width=ui.arena.offsetWidth;
                        ui.canvas.height=ui.arena.offsetHeight;
                        var ctx=ui.ctx;
                        ctx.shadowBlur=5;
                        ctx.shadowColor='rgba(0,0,0,0.3)';
                        ctx.strokeStyle='white';
                        ctx.lineWidth=3;
                        ctx.setLineDash([8,2]);

                        ctx.beginPath();

                        ctx.moveTo(_status.mousedragging.clientX/game.documentZoom-ui.arena.offsetLeft,_status.mousedragging.clientY/game.documentZoom-ui.arena.offsetTop);

                        if(_status.multitarget){
                            for(var i=0;i<_status.lastdragchange.length;i++){
                                var exy=_status.lastdragchange[i]._lastdragchange;
                                ctx.lineTo(exy[0],exy[1]);
                            }
                        }
                        if(!_status.selectionfull){
                            ctx.lineTo(e.touches[0].clientX/game.documentZoom-ui.arena.offsetLeft,e.touches[0].clientY/game.documentZoom-ui.arena.offsetTop);
                        }
                        ctx.stroke();
                        if(!_status.multitarget){
                            for(var i=0;i<_status.lastdragchange.length;i++){
                                ctx.moveTo(_status.mousedragging.clientX/game.documentZoom-ui.arena.offsetLeft,_status.mousedragging.clientY/game.documentZoom-ui.arena.offsetTop);
                                var exy=_status.lastdragchange[i]._lastdragchange;
                                ctx.lineTo(exy[0],exy[1]);
                                ctx.stroke();
                            }
                        }
                    }

                    if(item==_status.mousedragorigin){
                        if(_status.mouseleft){
                            _status.mousedragging=null;
                            _status.mousedragorigin=null;
                            _status.clicked=false;
                            game.uncheck();
                            game.check();
                            _status.clicked=true;
                        }
                        return;
                    }
                    var itemtype=get.itemtype(item);
                    if(itemtype=='card'||itemtype=='button'||itemtype=='player'){
                        _status.mouseleft=true;
                        if(ui.selected.cards.length){
                            ui.selected.cards[0].updateTransform(true,100);
                        }
                        var ex=e.touches[0].clientX/game.documentZoom-ui.arena.offsetLeft;
                        var ey=e.touches[0].clientY/game.documentZoom-ui.arena.offsetTop;
                        var exx=ex,eyy=ey;
                        if(game.chess){
                            ex-=-ui.chessContainer.chessLeft+ui.chess.offsetLeft;
                            ey-=-ui.chessContainer.chessTop+ui.chess.offsetTop;
                        }
                        if(itemtype!='player'||game.chess||(ex>item.offsetLeft&&ex<item.offsetLeft+item.offsetWidth&&
                            ey>item.offsetTop&&ey<item.offsetTop+item.offsetHeight)){
                            var targetfixed=false;
                            if(itemtype=='player'){
                                if(get.select(_status.event.selectTarget)[1]==-1){
                                    targetfixed=true;
                                }
                            }
                            if(!targetfixed&&item.classList.contains('selectable')&&_status.dragstatuschanged!=item){
                                _status.mouseleft=true;
                                _status.dragstatuschanged=item;
                                _status.clicked=false;
                                _status.dragged=false;
                                var notbefore=itemtype=='player'&&!item.classList.contains('selected');
                                ui.click[itemtype].call(item);
                                if(item.classList.contains('selected')){
                                    if(notbefore){
                                        _status.lastdragchange.push(item);
                                        item._lastdragchange=[exx,eyy];
                                        if(lib.falseitem){
                                            var from=[_status.mousedragging.clientX/game.documentZoom-ui.arena.offsetLeft,_status.mousedragging.clientY/game.documentZoom-ui.arena.offsetTop];
                                            var to=[exx,eyy];
                                            var node=ui.create.div('.linexy.hidden');
                                            node.style.left=from[0]+'px';
                                            node.style.top=from[1]+'px';
                                            node.style.transitionDuration='0.3s';
                                            node.style.backgroundColor='white';
                                            var dy=to[1]-from[1];
                                            var dx=to[0]-from[0];
                                            var deg=Math.atan(Math.abs(dy)/Math.abs(dx))/Math.PI*180;
                                            if(dx>=0){
                                                if(dy<=0){
                                                    deg+=90;
                                                }
                                                else{
                                                    deg=90-deg;
                                                }
                                            }
                                            else{
                                                if(dy<=0){
                                                    deg=270-deg;
                                                }
                                                else{
                                                    deg+=270;
                                                }
                                            }
                                            node.style.transform='rotate('+(-deg)+'deg) scaleY(0)';
                                            node.style.height=get.xyDistance(from,to)+'px';
                                            if(game.chess){
                                                ui.chess.appendChild(node);
                                            }
                                            else{
                                                ui.arena.appendChild(node);
                                            }
                                            ui.refresh(node);
                                            node.show();
                                            node.style.transform='rotate('+(-deg)+'deg) scaleY(1)';
                                            ui.touchlines.push(node);
                                            node._origin=item;
                                        }
                                    }
                                }
                                else{
                                    _status.lastdragchange.remove(item);
                                    for(var i=0;i<ui.touchlines.length;i++){
                                        if(ui.touchlines[i]._origin==item){
                                            ui.touchlines[i].delete();
                                            ui.touchlines.splice(i--,1);
                                        }
                                    }
                                }
                                _status.selectionfull=true;
                                if(_status.event.filterButton&&ui.selected.buttons.length<get.select(_status.event.selectButton)[1]){
                                    _status.selectionfull=false;
                                }
                                else if(_status.event.filterCard&&ui.selected.cards.length<get.select(_status.event.selectCard)[1]){
                                    _status.selectionfull=false;
                                }
                                else if(_status.event.filterTarget&&ui.selected.targets.length<get.select(_status.event.selectTarget)[1]){
                                    _status.selectionfull=false;
                                }
                            }
                        }
                        return;
                    }
                    item=item.parentNode;
                }
                _status.mouseleft=true;
                _status.dragstatuschanged=null;
            }
        },
        windowtouchend:function(e){
            delete _status.force;
            // if(_status.forcetouchinterval){
            // 	clearInterval(_status.forcetouchinterval);
            // 	delete _status.forcetouchinterval;
            // }
            if(window.inSplash) return;
            if(e.touches.length==1&&!_status.dragged&&!_status.draggingtouchdialog){
                ui.click.pause();
            }
            if(_status.draggingroundmenu){
                delete _status._swipeorigin;
                if(ui.roundmenu._resetTimeout){
                    clearTimeout(ui.roundmenu._resetTimeout);
                    delete ui.roundmenu._resetTimeout;
                }
                var translate;
                if(ui.roundmenu._dragorigin&&ui.roundmenu._dragtransform&&ui.roundmenu._dragtouches){
                    var dx=ui.roundmenu._dragtouches.clientX/game.documentZoom-ui.roundmenu._dragorigin.clientX/game.documentZoom;
                    var dy=ui.roundmenu._dragtouches.clientY/game.documentZoom-ui.roundmenu._dragorigin.clientY/game.documentZoom;
                    if(dx*dx+dy*dy<1000){
                        ui.click.roundmenu();
                        ui.roundmenu._dragtransform=ui.roundmenu._dragorigintransform;
                        translate=ui.roundmenu._dragtransform;
                        ui.roundmenu.style.transform='translate('+translate[0]+'px,'+translate[1]+'px)';
                    }
                    else{
                        translate=ui.roundmenu._dragtransform;
                        translate[0]+=dx;
                        translate[1]+=dy;
                        ui.click.checkroundtranslate();
                    }
                    delete ui.roundmenu._dragorigin;
                }
                else{
                    ui.click.roundmenu();
                }
                _status.clicked=false;
                game.saveConfig('roundmenu_transform',translate);
                delete _status.draggingroundmenu;
            }
            else if(_status.draggingtouchdialog){
                delete _status._swipeorigin;
                var translate;
                if(_status.draggingtouchdialog._dragorigin&&_status.draggingtouchdialog._dragtransform&&_status.draggingtouchdialog._dragtouches){
                    var dx=_status.draggingtouchdialog._dragtouches.clientX/game.documentZoom-_status.draggingtouchdialog._dragorigin.clientX/game.documentZoom;
                    var dy=_status.draggingtouchdialog._dragtouches.clientY/game.documentZoom-_status.draggingtouchdialog._dragorigin.clientY/game.documentZoom;
                    translate=_status.draggingtouchdialog._dragtransform;
                    translate[0]+=dx;
                    translate[1]+=dy;
                    ui.click.checkdialogtranslate(null,_status.draggingtouchdialog);

                    delete _status.draggingtouchdialog._dragorigin;
                }
                _status.clicked=false;
                game.saveConfig('dialog_transform',translate);
                delete _status.draggingtouchdialog;
                _status.justdragged=true;
                setTimeout(function(){
                    _status.justdragged=false;
                },500);
            }
            else if(_status._swipeorigin&&!_status.paused2&&!_status.mousedragging&&_status._swipeorigin.touches&&!_status.filterCharacter){
                if(get.utc()-_status._swipeorigin.time<500){
                    var dx=_status._swipeorigin.touches.clientX/game.documentZoom-_status._swipeorigin.clientX/game.documentZoom;
                    var dy=_status._swipeorigin.touches.clientY/game.documentZoom-_status._swipeorigin.clientY/game.documentZoom;
                    var goswipe=function(action){
                        game.closeConnectMenu();
                        switch(action){
                            case 'system':
                                game.closePopped();
                                ui.system1.classList.add('shown');
                                ui.system2.classList.add('shown');
                                game.closeMenu();
                                ui.click.shortcut();
                                break;
                            case 'menu':
                                if(ui.click.configMenu){
                                    game.closePopped();
                                    game.pause2();
                                    ui.click.configMenu();
                                    ui.system1.classList.remove('shown');
                                    ui.system2.classList.remove('shown');
                                }
                                break;
                            case 'pause':
                                ui.click.pause();
                                break;
                            case 'auto':
                                ui.click.auto();
                                break;
                            case 'chat':
                                game.closeMenu();
                                if(ui.chatButton){
                                    ui.click.hoverpopped.call(ui.chatButton);
                                }
                                break;
                        }
                    }
                    if(Math.abs(dx)<100){
                        if(dy<-200){
                            goswipe(lib.config.swipe_up);
                        }
                        else if(dy>200){
                            goswipe(lib.config.swipe_down);
                        }
                    }
                    else if(Math.abs(dy)<100){
                        if(dx<-200){
                            goswipe(lib.config.swipe_left);
                        }
                        else if(dx>200){
                            goswipe(lib.config.swipe_right);
                        }
                    }
                }
            }
            var tmpflag=false;
            _status.mousedown=false;
            _status.clicked=false;
            if(_status.mousedragging&&_status.mouseleft){
                if(game.check()){
                    if(ui.confirm){
                        ui.confirm.close();
                    }
                    ui.click.ok();
                    ui.canvas.width=ui.arena.offsetWidth;
                    ui.canvas.height=ui.arena.offsetHeight;
                }
                else{
                    game.uncheck();
                    game.check();
                }
            }
            else if(_status.mousedragging&&_status.mousedragorigin){
                tmpflag=_status.mousedragorigin;
            }
            _status.lastdragchange.length=0;
            _status.mousedragging=null;
            _status.mouseleft=false;
            _status.mousedragorigin=null;
            _status.dragstatuschanged=false;
            while(ui.touchlines.length){
                ui.touchlines.shift().delete();
            }
            if(tmpflag){
                game.check();
            }
            _status.dragged=false;
            _status.clicked=false;
        },
        checkroundtranslate:function(translate){
            var translate=translate||ui.roundmenu._dragtransform;
            if(translate[1]+ui.roundmenu._position[1]+50+ui.arena.offsetTop>ui.window.offsetHeight){
                translate[1]=ui.window.offsetHeight-(ui.roundmenu._position[1]+50)-ui.arena.offsetTop;
            }
            else if(translate[1]+ui.roundmenu._position[1]+ui.arena.offsetTop<0){
                translate[1]=-ui.roundmenu._position[1]-ui.arena.offsetTop;
            }
            if(translate[0]+ui.roundmenu._position[0]+50+ui.arena.offsetLeft>ui.window.offsetWidth){
                translate[0]=ui.window.offsetWidth-(ui.roundmenu._position[0]+50)-ui.arena.offsetLeft;
            }
            else if(translate[0]+ui.roundmenu._position[0]+ui.arena.offsetLeft<0){
                translate[0]=-ui.roundmenu._position[0]-ui.arena.offsetLeft;
            }
            ui.roundmenu.style.transform='translate('+translate[0]+'px,'+translate[1]+'px)';
        },
        checkdialogtranslate:function(translate,dialog){
            var translate=translate||dialog._dragtransform;
            if(Math.sqrt(translate[0]*translate[0]+translate[1]*translate[1])<10){
                translate[0]=0;
                translate[1]=0;
            }
            dialog.style.transform='translate('+translate[0]+'px,'+translate[1]+'px)';
        },
        windowmousewheel:function(e){
            _status.tempunpopup=e;
        },
        windowmousemove:function(e){
            if(window.inSplash) return;
            if(_status.tempunpopup){
                if(get.evtDistance(_status.tempunpopup,e)>5){
                    delete _status.tempunpopup;
                }
            }
            if(e.button==2) return;
            var dialogs=document.querySelectorAll('#window>.dialog.popped:not(.static)');
            for(var i=0;i<dialogs.length;i++){
                dialogs[i].delete();
            }
            var node=_status.currentmouseenter;
            var sourceitem=document.elementFromPoint(e.clientX,e.clientY);
            if(game.chess&&ui.selected.cards.length){
                var itemtype=get.itemtype(sourceitem);
                if(itemtype!='card'&&itemtype!='button'){
                    for(var i=0;i<game.players.length;i++){
                        var ex=e.clientX/game.documentZoom-ui.arena.offsetLeft;
                        var ey=e.clientY/game.documentZoom-ui.arena.offsetTop;
                        var left=-ui.chessContainer.chessLeft+ui.chess.offsetLeft+game.players[i].getLeft();
                        var top=-ui.chessContainer.chessTop+ui.chess.offsetTop+game.players[i].getTop();
                        var width=game.players[i].offsetWidth;
                        var height=game.players[i].offsetHeight;
                        if(ex>left&&ex<left+width&&ey>top&&ey<top+height){
                            sourceitem=game.players[i];
                            break;
                        }
                    }
                }
            }
            var item=sourceitem;
            if(_status.mousedragging){
                e.preventDefault();
                if(lib.config.enable_dragline){
                    // var i=0;
                    // var startPoint0=[_status.mousedragging.clientX/game.documentZoom-ui.arena.offsetLeft,_status.mousedragging.clientY/game.documentZoom-ui.arena.offsetTop];
                    // var startPoint=startPoint0;
                    // var endPoint;
                    // if(_status.multitarget){
                    // 	for(;i<_status.lastdragchange.length;i++){
                    // 		var exy=_status.lastdragchange[i]._lastdragchange;
                    // 		endPoint=[exy[0],exy[1]];
                    // 		_status.dragline[i]=game.linexy(startPoint.concat(endPoint),'drag',_status.dragline[i]);
                    // 		startPoint=endPoint;
                    // 	}
                    // }
                    // if(!_status.selectionfull){
                    // 	endPoint=[e.clientX/game.documentZoom-ui.arena.offsetLeft,e.clientY/game.documentZoom-ui.arena.offsetTop];
                    // 	_status.dragline[i]=game.linexy(startPoint.concat(endPoint),'drag',_status.dragline[i]);
                    // 	startPoint=endPoint;
                    // 	i++;
                    // }
                    // if(!_status.multitarget){
                    // 	for(var j=0;j<_status.lastdragchange.length;j++){
                    // 		i+=j;
                    // 		var exy=_status.lastdragchange[j]._lastdragchange;
                    // 		_status.dragline[i]=game.linexy(startPoint0.concat([exy[0],exy[1]]),'drag',_status.dragline[i]);
                    // 	}
                    // }
                    // var remained=_status.dragline.splice(i+1);
                    // for(var j=0;j<remained.length;j++){
                    // 	if(remained[j]) remained[j].remove();
                    // }

                    ui.canvas.width=ui.arena.offsetWidth;
                    ui.canvas.height=ui.arena.offsetHeight;
                    var ctx=ui.ctx;
                    ctx.shadowBlur=5;
                    ctx.shadowColor='rgba(0,0,0,0.3)';
                    ctx.strokeStyle='white';
                    ctx.lineWidth=3;
                    ctx.setLineDash([8,2]);

                    ctx.beginPath();

                    ctx.moveTo(_status.mousedragging.clientX/game.documentZoom-ui.arena.offsetLeft,_status.mousedragging.clientY/game.documentZoom-ui.arena.offsetTop);
                    if(_status.multitarget){
                        for(var i=0;i<_status.lastdragchange.length;i++){
                            var exy=_status.lastdragchange[i]._lastdragchange;
                            ctx.lineTo(exy[0],exy[1]);
                        }
                    }
                    if(!_status.selectionfull){
                        ctx.lineTo(e.clientX/game.documentZoom-ui.arena.offsetLeft,e.clientY/game.documentZoom-ui.arena.offsetTop);
                    }
                    ctx.stroke();
                    if(!_status.multitarget){
                        for(var i=0;i<_status.lastdragchange.length;i++){
                            ctx.moveTo(_status.mousedragging.clientX/game.documentZoom-ui.arena.offsetLeft,_status.mousedragging.clientY/game.documentZoom-ui.arena.offsetTop);
                            var exy=_status.lastdragchange[i]._lastdragchange;
                            ctx.lineTo(exy[0],exy[1]);
                            ctx.stroke();
                        }
                    }
                }

                while(item){
                    if(item==_status.mousedragorigin){
                        if(_status.mouseleft){
                            _status.mousedragging=null;
                            _status.mousedragorigin=null;
                            _status.clicked=false;
                            if(_status.event.type=='phase'&&!_status.event.skill&&ui.confirm){
                                ui.confirm.classList.add('removing');
                            }
                            game.uncheck();
                            game.check();
                            _status.clicked=true;
                        }
                        return;
                    }
                    var itemtype=get.itemtype(item);
                    if(itemtype=='card'||itemtype=='button'||itemtype=='player'){
                        _status.mouseleft=true;
                        if(ui.selected.cards.length){
                            ui.selected.cards[0].updateTransform(true,100);
                        }
                        var ex=e.clientX/game.documentZoom-ui.arena.offsetLeft;
                        var ey=e.clientY/game.documentZoom-ui.arena.offsetTop;
                        var exx=ex,eyy=ey;
                        if(game.chess){
                            ex-=-ui.chessContainer.chessLeft+ui.chess.offsetLeft;
                            ey-=-ui.chessContainer.chessTop+ui.chess.offsetTop;
                        }
                        if(itemtype!='player'||game.chess||(ex>item.offsetLeft&&ex<item.offsetLeft+item.offsetWidth&&
                            ey>item.offsetTop&&ey<item.offsetTop+item.offsetHeight)){
                            var targetfixed=false;
                            if(itemtype=='player'){
                                if(get.select(_status.event.selectTarget)[1]==-1){
                                    targetfixed=true;
                                }
                            }
                            if(!targetfixed&&item.classList.contains('selectable')&&_status.dragstatuschanged!=item){
                                _status.mouseleft=true;
                                _status.dragstatuschanged=item;
                                _status.clicked=false;
                                var notbefore=itemtype=='player'&&!item.classList.contains('selected');
                                ui.click[itemtype].call(item);
                                if(item.classList.contains('selected')){
                                    if(notbefore){
                                        _status.lastdragchange.push(item);
                                        item._lastdragchange=[exx,eyy];
                                    }
                                }
                                else{
                                    _status.lastdragchange.remove(item);
                                }
                                _status.selectionfull=true;
                                if(_status.event.filterButton&&ui.selected.buttons.length<get.select(_status.event.selectButton)[1]){
                                    _status.selectionfull=false;
                                }
                                else if(_status.event.filterCard&&ui.selected.cards.length<get.select(_status.event.selectCard)[1]){
                                    _status.selectionfull=false;
                                }
                                else if(_status.event.filterTarget&&ui.selected.targets.length<get.select(_status.event.selectTarget)[1]){
                                    _status.selectionfull=false;
                                }
                            }
                        }
                        return;
                    }
                    item=item.parentNode;
                }
                if(!_status.mouseleft){
                    _status.mouseleft=true;
                    game.check();
                    for(var i=0;i<ui.selected.cards.length;i++){
                        ui.selected.cards[i].updateTransform(true);
                    }
                }
                _status.dragstatuschanged=null;
            }
            else{
                while(item){
                    if(item==node&&!node._mouseentercreated){
                        ui.click.mouseentercancel();
                        var hoveration;
                        if(typeof node._hoveration=='number'){
                            hoveration=node._hoveration;
                        }
                        else{
                            hoveration=parseInt(lib.config.hoveration);
                            if(node.classList.contains('button')||
                                (node.parentNode&&node.parentNode.parentNode)==ui.me){
                                hoveration+=500;
                            }
                        }
                        _status._mouseentertimeout=setTimeout(function(){
                            if(_status.currentmouseenter!=node||node._mouseentercreated||_status.tempunpopup||
                                _status.mousedragging||_status.mousedown||!node.offsetWidth||!node.offsetHeight){
                                return;
                            }
                            if(node._hoverfunc&&!node._nopup){
                                var dialog=node._hoverfunc.call(node,e);
                                if(dialog){
                                    dialog.classList.add('popped');
                                    ui.window.appendChild(dialog);
                                    lib.placePoppedDialog(dialog,e);
                                    if(node._hoverwidth){
                                        dialog.style.width=node._hoverwidth+'px';
                                        dialog._hovercustomed=true;
                                    }
                                    node._mouseenterdialog=dialog;
                                    node._mouseentercreated=true;
                                }
                            }
                        },hoveration);
                        break;
                    }
                    item=item.parentNode;
                }
                if(_status.draggingdialog){
                    var ddialog=_status.draggingdialog;
                    if(ddialog._dragorigin&&ddialog._dragtransform){
                        var translate=ddialog._dragtransform.slice(0);
                        translate[0]+=e.clientX/game.documentZoom-ddialog._dragorigin.clientX/game.documentZoom;
                        translate[1]+=e.clientY/game.documentZoom-ddialog._dragorigin.clientY/game.documentZoom;
                        ui.click.checkdialogtranslate(translate,ddialog);
                    }
                    _status.clicked=true;
                }
                if(_status.draggingroundmenu){
                    if(ui.roundmenu._dragorigin&&ui.roundmenu._dragtransform){
                        var translate=ui.roundmenu._dragtransform.slice(0);
                        translate[0]+=e.clientX/game.documentZoom-ui.roundmenu._dragorigin.clientX/game.documentZoom;
                        translate[1]+=e.clientY/game.documentZoom-ui.roundmenu._dragorigin.clientY/game.documentZoom;
                        ui.click.checkroundtranslate(translate);
                    }
                    _status.clicked=true;
                }
            }
        },
        windowmousedown:function(e){
            if(window.inSplash) return;
            if(!ui.window) return;
            if(e.button==2) return;
            _status.mousedown=true;
            var dialogs=ui.window.querySelectorAll('#window>.dialog.popped:not(.static)');
            for(var i=0;i<dialogs.length;i++){
                dialogs[i].delete();
            }
            var sourceitem=document.elementFromPoint(e.clientX,e.clientY);
            var item=sourceitem;
            while(item){
                var itemtype=get.itemtype(item);
                if(itemtype=='button') break;
                if(itemtype=='dialog'&&
                !item.classList.contains('popped')&&
                !item.classList.contains('fixed')){
                    var ddialog=item;
                    _status.draggingdialog=ddialog;
                    ddialog._dragorigin=e;
                    if(!ddialog._dragtransform){
                        ddialog._dragtransform=[0,0];
                    }
                    return;
                }
                if(item==ui.roundmenu){
                    _status.draggingroundmenu=true;
                    ui.roundmenu._dragorigin=e;
                    if(!ui.roundmenu._dragtransform){
                        ui.roundmenu._dragtransform=[0,0];
                    }
                    return;
                }
                item=item.parentNode;
            }

            var evt=_status.event;
            if(!lib.config.enable_drag) return;
            if(!ui.arena.classList.contains('selecting')) return;
            if(!evt.isMine()) return;

            item=sourceitem;
            while(item){
                var itemtype=get.itemtype(item);
                if(itemtype=='card'||itemtype=='button'||itemtype=='player'){
                    if(item.classList.contains('selectable')&&
                        !item.classList.contains('selected')&&
                        !item.classList.contains('noclick')){
                        _status.clicked=false;
                        ui.click[itemtype].call(item);
                        if(item.classList.contains('selected')){
                            _status.mousedragging=e;
                            _status.mousedragorigin=item;
                            _status.mouseleft=false;
                            _status.selectionfull=false;
                            _status.multitarget=false;
                            _status.lastmouseutc=get.utc();
                            ui.arena.classList.add('dragging');
                        }
                    }
                    return;
                }
                item=item.parentNode;
            }
        },
        cardtouchstart:function(e){
            if(e.touches.length!=1) return;
            if(!lib.config.enable_drag) return;
            if(!this.parentNode) return;
            if(!this.parentNode.parentNode) return;
            if(this.parentNode.parentNode.parentNode!=ui.me) return;
            if(this.parentNode.parentNode.classList.contains('scrollh')) return;
            if(this.classList.contains('selectable')&&
                !this.classList.contains('selected')&&
                !this.classList.contains('noclick')){
                this._waitingfordrag={
                    clientX:e.touches[0].clientX,
                    clientY:e.touches[0].clientY
                };
            }
        },
        cardtouchmove:function(e){
            ui.click.longpresscancel.call(this);
            if(this._waitingfordrag){
                var drag=this._waitingfordrag;
                _status.clicked=false;
                _status.touchnocheck=true;
                ui.click.card.call(this);
                _status.touchnocheck=false;
                if(this.classList.contains('selected')){
                    _status.mousedragging=drag;
                    _status.mousedragorigin=this;
                    _status.mouseleft=false;
                    _status.selectionfull=false;
                    _status.multitarget=false;
                }
                delete this._waitingfordrag;
            }
        },
        windowmouseup:function(e){
            delete _status.force;
            // if(_status.forcetouchinterval){
            // 	clearInterval(_status.forcetouchinterval);
            // 	delete _status.forcetouchinterval;
            // }
            if(window.inSplash) return;
            if(_status.draggingdialog){
                var ddialog=_status.draggingdialog;
                var translate;
                if(ddialog._dragorigin&&ddialog._dragtransform){
                    translate=ddialog._dragtransform;
                    translate[0]+=e.clientX/game.documentZoom-ddialog._dragorigin.clientX/game.documentZoom;
                    translate[1]+=e.clientY/game.documentZoom-ddialog._dragorigin.clientY/game.documentZoom;
                    ui.click.checkdialogtranslate(null,ddialog);
                    delete ddialog._dragorigin;
                }
                game.saveConfig('dialog_transform',translate);
                delete _status.draggingdialog;
            }
            if(_status.draggingroundmenu){
                var translate;
                if(ui.roundmenu._dragorigin&&ui.roundmenu._dragtransform){
                    var dx=e.clientX/game.documentZoom-ui.roundmenu._dragorigin.clientX/game.documentZoom;
                    var dy=e.clientY/game.documentZoom-ui.roundmenu._dragorigin.clientY/game.documentZoom;
                    if(dx*dx+dy*dy<25){
                        ui.click.roundmenu();
                    }
                    translate=ui.roundmenu._dragtransform;
                    translate[0]+=dx;
                    translate[1]+=dy;
                    ui.click.checkroundtranslate();
                    delete ui.roundmenu._dragorigin;
                }
                game.saveConfig('roundmenu_transform',translate);
                delete _status.draggingroundmenu;
            }
            if(e.button==2){
                if(_status.mousedragging){
                    _status.mousedragging=null;
                    _status.mouseleft=false;
                    _status.mousedragorigin=null;
                    _status.dragstatuschanged=false;
                    game.uncheck();
                    game.check();
                    _status.noright=true;
                }
            }
            else{
                var tmpflag=false;
                _status.mousedown=false;
                for(var i=0;i<ui.selected.cards.length;i++){
                    ui.selected.cards[i].updateTransform(true);
                }
                if(_status.mousedragging&&_status.mouseleft){
                    if(game.check()){
                        if(ui.confirm){
                            ui.confirm.close();
                        }
                        ui.click.ok();
                    }
                    else{
                        game.uncheck();
                        game.check();
                    }
                }
                else if(_status.mousedragging&&_status.mousedragorigin){
                    tmpflag=_status.mousedragorigin;
                }
                _status.lastdragchange.length=0;
                _status.mousedragging=null;
                _status.mouseleft=false;
                _status.mousedragorigin=null;
                _status.dragstatuschanged=false;
                if(ui.arena){
                    ui.canvas.width=ui.arena.offsetWidth;
                    ui.canvas.height=ui.arena.offsetHeight;
                }
                if(tmpflag){
                    ui.click[get.itemtype(tmpflag)].call(tmpflag);
                    game.check();
                }
                // ui.updatehl();
            }
            if(ui.arena){
                ui.arena.classList.remove('dragging');
            }
        },
        mousemove:function(){
            if(!lib.config.hover_handcard&&this.parentNode&&this.parentNode.parentNode==ui.me){
                return;
            }
            if(!_status.currentmouseenter){
                _status.currentmouseenter=this;
            }
        },
        mouseenter:function(){
            if(!lib.config.hover_handcard&&this.parentNode&&this.parentNode.parentNode==ui.me){
                return;
            }
            _status.currentmouseenter=this;
        },
        mouseleave:function(){
            ui.click.mouseentercancel();
            if(_status.currentmouseenter==this){
                _status.currentmouseenter=null;
            }
            this._mouseentercreated=false;
        },
        mousedown:function(){
            ui.click.mouseentercancel();
            if(_status.currentmouseenter==this){
                _status.currentmouseenter=null;
            }
            this._mouseentercreated=true;
        },
        mouseentercancel:function(){
            if(_status._mouseentertimeout){
                clearTimeout(_status._mouseentertimeout);
                delete _status._mouseentertimeout
            }
        },
        hoverplayer:function(e){
            var node=get.nodeintro(this,true);
            if(node) node.style.zIndex=21;
            return node;
        },
        longpressdown:function(e){
            if(_status.longpressed) return;
            if(this._longpresstimeout){
                clearTimeout(this._longpresstimeout);
            }
            if(lib.config.longpress_info){
                this._longpresstimeout=setTimeout(ui.click.longpresscallback,500);
            }
            this._longpressevent=e;
            if(_status.longpressing&&_status.longpressing!=this){
                ui.click.longpresscancel.call(_status.longpressing);
            }
            // if(window.ForceTouch&&!_status.forcetouchinterval&&lib.config.enable_pressure){
            // 	_status.forcetouchinterval=setInterval(ui.click.forcetouch,30);
            // }
            _status.longpressing=this;
        },
        longpresscallback:function(){
            if(!_status.longpressing) return;
            var node=_status.longpressing;
            var func=node._longpresscallback;
            var e=node._longpressevent;
            if(!func||!e) return;
            clearTimeout(node._longpresstimeout);
            _status.force=true;
            delete _status.longpressing;
            delete node._longpresstimeout;
            delete node._longpressevent;
            if(_status.mousedragging&&_status.mouseleft) return;
            if(!_status.longpressed){
                _status.longpressed=true;
                setTimeout(function(){
                    _status.longpressed=false;
                },500);
                func.call(node,e);
                if(lib.config.touchscreen&&lib.config.enable_drag&&!node._waitingfordrag){
                    _status.mousedragging=null;
                    _status.mousedragorigin=null;
                    _status.clicked=false;
                    game.uncheck();
                    game.check();
                    _status.clicked=true;
                }
                delete node._waitingfordrag;
                ui.click.touchpop();
            }
        },
        longpresscancel:function(){
            if(this._longpresstimeout){
                clearTimeout(this._longpresstimeout);
                delete this._longpresstimeout;
            }
            delete this._longpressevent;
            if(_status.longpressing==this){
                delete _status.longpressing;
            }
        },
        window:function(){
            var clicked=_status.clicked;
            var dialogtouched=false;
            if(_status.dialogtouched){
                _status.dialogtouched=false;
                dialogtouched=true;
            }
            if(_status.dragged) return;
            if(_status.touchpopping) return;
            if(_status.reloading) return;
            if(_status.clicked||_status.clicked2){
                _status.clicked=false;
                _status.clicked2=false;
            }
            else{
                if(_status.clickingidentity){
                    for(var i=0;i<_status.clickingidentity[1].length;i++){
                        _status.clickingidentity[1][i].delete();
                        _status.clickingidentity[1][i].style.transform='';
                    }
                    delete _status.clickingidentity;
                }
                if(!_status.event.isMine) return;
                if(ui.controls.length){
                    ui.updatec();
                }
                if(_status.editing){
                    if(_status.editing.innerHTML.length){
                        _status.editing.link=_status.editing.innerHTML;
                    }
                    _status.editing.innerHTML=get.translation(_status.editing.link);
                    delete _status.editing;
                }
                else if(_status.choosing){
                    if(!_status.choosing.expand){
                        _status.choosing.parentNode.style.height='';
                        _status.choosing.nextSibling.delete();
                        _status.choosing.previousSibling.show();
                        delete _status.choosing;
                    }
                }
                else if(ui.intro){
                    ui.intro.close();
                    delete ui.intro;
                    ui.control.show();
                    game.resume2();
                }
                else if(_status.event.isMine()&&!dialogtouched){
                    if(_status.event.custom.replace.window){
                        _status.event.custom.replace.window();
                    }
                    else{
                        if(_status.event.skill&&_status.event.name=='chooseToUse'){
                            ui.click.cancel();
                        }
                        else{
                            game.uncheck();
                            game.check();
                        }
                    }
                }
                if(!ui.shortcut.classList.contains('hidden')){
                    ui.click.shortcut(false);
                }
                if(get.is.phoneLayout()&&ui.menuContainer&&ui.menuContainer.classList.contains('hidden')){
                    if(ui.system2.classList.contains('shown')){
                        _status.removinground=true;
                        setTimeout(function(){
                            _status.removinground=false;
                        },200);
                    }
                    ui.arena.classList.remove('phonetop');
                    ui.system1.classList.remove('shown');
                    ui.system2.classList.remove('shown');
                    // if(ui.chessinfo){
                    // 	ui.chessinfo.classList.remove('zoomed');
                    // }
                }
            }
            if(_status.tempunpop){
                _status.tempunpop=false;
            }
            else{
                game.closePopped();
            }
            if(_status.event.custom&&_status.event.custom.add.window){
                _status.event.custom.add.window(clicked);
            }
        },
        toggle:function(){
            if(_status.dragged) return;
            if(this.parentNode.classList.contains('disabled')) return;
            _status.tempunpop=true;
            if(this.link){
                this.link=false;
                this.classList.remove('on');
                if(this.additionalCommand) this.additionalCommand(false,this.parentNode);
            }
            else{
                this.link=true;
                this.classList.add('on');
                if(this.additionalCommand) this.additionalCommand(true,this.parentNode);
            }
        },
        editor:function(){
            if(_status.dragged) return;
            if(_status.editing) return;
            _status.clicked=true;
            this.innerHTML='';
            _status.editing=this;
            if(this.additionalCommand) this.additionalCommand(this);
        },
        switcher:function(){
            if(_status.dragged) return;
            if(this.parentNode.classList.contains('disabled')) return;
            if(_status.choosing) return;
            _status.clicked=true;
            _status.tempunpop=true;
            this.previousSibling.hide();
            var node=ui.create.div('.switcher',this.parentNode).animate('start');
            for(var i=0;i<this.choice.length;i++){
                var choice=ui.create.div('.pointerdiv',node);
                choice.innerHTML=get.translation(this.choice[i]);
                choice.link=this.choice[i];
                choice.addEventListener(lib.config.touchscreen?'touchend':'click',ui.click.choice);
            }
            // this.parentNode.style.height=(node.offsetHeight)+'px';
            _status.choosing=this;
            if(!_status.choosing.expand){
                _status.choosing.expand=true;
                setTimeout(function(){
                    _status.choosing.expand=false;
                },500);
            }
        },
        choice:function(){
            if(_status.dragged) return;
            if(!_status.choosing) return;
            _status.choosing.link=this.link;
            _status.choosing.innerHTML=get.translation(this.link);
            this.parentNode.parentNode.style.height='';
            this.parentNode.delete();
            _status.choosing.previousSibling.show();
            delete _status.choosing;
            if(this.parentNode.parentNode.querySelector('.toggle').additionalCommand){
                this.parentNode.parentNode.querySelector('.toggle').additionalCommand(this.link,this.parentNode.parentNode);
            }
        },
        button:function(){
            if(_status.dragged) return;
            if(_status.clicked) return;
            if(_status.tempNoButton) return;
            if(_status.draggingtouchdialog) return;
            if(this.classList.contains('noclick')) return;
            if(_status.justdragged) return;
            _status.clicked=true;
            var custom=_status.event.custom;
            if(custom.replace.button){
                custom.replace.button(this);
                return;
            }
            if(!_status.event.isMine()) return;
            if(this.classList.contains('selectable')==false) return;
            if(this.classList.contains('selected')){
                ui.selected.buttons.remove(this);
                this.classList.remove('selected');
                if(_status.multitarget||_status.event.complexSelect){
                    game.uncheck();
                    game.check();
                }
            }
            else{
                this.classList.add('selected');
                ui.selected.buttons.add(this);
            }
            if(custom.add.button){
                custom.add.button();
            }
            game.check();
        },
        touchintro:function(){
            var rect=this.getBoundingClientRect();
            ui.click.touchpop();
            ui.click.intro.call(this,{
                clientX:rect.left+18,
                clientY:rect.top+12
            });
            _status.clicked=false;
        },
        card:function(){
            delete this._waitingfordrag;
            if(_status.dragged) return;
            if(_status.clicked) return;
            if(ui.intro) return;
            _status.clicked=true;
            if(this.parentNode&&(this.parentNode.classList.contains('judges')||this.parentNode.classList.contains('marks'))){
                var rect=this.getBoundingClientRect();
                ui.click.touchpop();
                ui.click.intro.call(this,{
                    clientX:rect.left+18,
                    clientY:rect.top+12
                });
                _status.clicked=false;
                return;
            }
            var custom=_status.event.custom;
            if(custom.replace.card){
                custom.replace.card(this);
                return;
            }
            if(this.classList.contains('selectable')==false) return;
            if(this.classList.contains('selected')){
                ui.selected.cards.remove(this);
                if(_status.multitarget||_status.event.complexSelect){
                    game.uncheck();
                    game.check();
                }
                else{
                    this.classList.remove('selected');
                    this.updateTransform();
                }
            }
            else{
                ui.selected.cards.add(this);
                this.classList.add('selected');
                this.updateTransform(true);
            }
            if(game.chess&&get.config('show_range')&&!_status.event.skill&&this.classList.contains('selected')&&
            _status.event.isMine()&&_status.event.name=='chooseToUse'){
                var player=_status.event.player;
                var range=get.info(this).range;
                if(range){
                    if(typeof range.attack==='number'){
                        player.createRangeShadow(Math.min(8,player.getAttackRange(true)+range.attack-1));
                    }
                    else if(typeof range.global==='number'){
                        player.createRangeShadow(Math.min(8,player.getGlobalFrom()+range.global));
                    }
                }
            }
            if(custom.add.card){
                custom.add.card();
            }
            game.check();

            if(lib.config.popequip&&get.is.phoneLayout()&&
                arguments[0]!='popequip'&&ui.arena&&ui.arena.classList.contains('selecting')&&
                this.parentNode.classList.contains('popequip')){
                var rect=this.getBoundingClientRect();
                ui.click.touchpop();
                ui.click.intro.call(this.parentNode,{
                    clientX:rect.left+18,
                    clientY:rect.top+12
                });
            }
        },
        avatar:function(){
            if(!lib.config.doubleclick_intro) return;
            if(this.parentNode.isUnseen(0)) return;
            if(!lib.character[this.parentNode.name]) return;
            if(!ui.menuContainer) return;
            var avatar=this;
            var player=this.parentNode;
            if(!game.players.contains(player)&&!game.dead.contains(player)) return;
            if(!this._doubleClicking){
                this._doubleClicking=true;
                setTimeout(function(){
                    avatar._doubleClicking=false;
                },500);
                return;
            }
            // ui.click.skin(this,player.name);
            game.pause2();
            ui.click.charactercard(player.name,null,null,true,this);
        },
        avatar2:function(){
            if(!lib.config.doubleclick_intro) return;
            if(this.parentNode.classList.contains('unseen2')) return;
            if(!lib.character[this.parentNode.name2]) return;
            if(!ui.menuContainer) return;
            var avatar=this;
            var player=this.parentNode;
            if(!game.players.contains(player)&&!game.dead.contains(player)) return;
            if(!this._doubleClicking){
                this._doubleClicking=true;
                setTimeout(function(){
                    avatar._doubleClicking=false;
                },500);
                return;
            }
            // ui.click.skin(this,player.name2);
            game.pause2();
            ui.click.charactercard(player.name2,null,null,true,this);
        },
        player:function(){
            return ui.click.target.apply(this,arguments);
        },
        target:function(e){
            if(_status.dragged) return;
            if(_status.clicked) return;
            if(ui.intro) return;
            if(this.classList.contains('connect')){
                if(game.online){
                    if(game.onlinezhu){
                        if(!this.playerid&&game.connectPlayers){
                            if(lib.configOL.mode=='versus'||lib.configOL.mode=='doudizhu') return;
                            if(lib.configOL.mode=='identity'&&lib.configOL.identity_mode=='zhong') return;
                            if(!this.classList.contains('unselectable2')&&lib.configOL.number<=2) return;
                            this.classList.toggle('unselectable2')
                            if(this.classList.contains('unselectable2')){
                                lib.configOL.number--;
                            }
                            else{
                                lib.configOL.number++;
                            }
                            game.send('changeNumConfig',lib.configOL.number,
                            game.connectPlayers.indexOf(this),this.classList.contains('unselectable2'));
                        }
                    }
                    else if(this.hasOwnProperty('roomindex')){
                        if(this.roomfull){
                            alert('房间已满');
                        }
                        else if(this.roomgaming&&!game.onlineID){
                            if(this.config&&this.config.observe){
                                alert('房间暂时不可旁观');
                            }
                            else{
                                alert('房间不允许旁观');
                            }
                        }
                        else if(!this.roomempty&&this.version!=lib.versionOL){
                            if(this.version>lib.versionOL){
                                alert('加入失败：你的游戏版本过低');
                            }
                            else{
                                alert('加入失败：房主的游戏版本过低');
                            }
                        }
                        else{
                            if(!_status.enteringroom){
                                _status.enteringroom=true;
                                _status.enteringroomserver=this.serving;
                                if(this.roomempty){
                                    _status.roomindex=this.roomindex;
                                    ui.click.connectMenu();
                                }
                                else{
                                    game.send('server','enter',this.roomindex,lib.config.connect_nickname,lib.config.connect_avatar);
                                }
                            }
                        }
                    }
                    return;
                }
                if(this.playerid){
                    if(this.ws){
                        if(confirm('是否踢出'+this.nickname+'？')){
                            var id=get.id();
                            this.ws.send(function(id){
                                if(game.ws){
                                    game.ws.close();
                                    game.saveConfig('reconnect_info');
                                    game.saveConfig('banned_info',id);
                                }
                            },id);
                            lib.node.banned.push(id);
                        }
                    }
                }
                else{
                    if(lib.configOL.mode=='versus'||lib.configOL.mode=='doudizhu') return;
                    if(lib.configOL.mode=='identity'&&lib.configOL.identity_mode=='zhong') return;
                    if(!this.classList.contains('unselectable2')&&lib.configOL.number<=2) return;
                    this.classList.toggle('unselectable2')
                    if(this.classList.contains('unselectable2')){
                        lib.configOL.number--;
                    }
                    else{
                        lib.configOL.number++;
                    }
                    game.send('server','config',lib.configOL);
                    game.updateWaiting();
                }
                return;
            }
            _status.clicked=true;
            var custom=_status.event.custom;
            if(custom.replace.target){
                custom.replace.target(this,e);
                return;
            }
            if(this.classList.contains('selectable')==false) return;
            this.unprompt();
            if(this.classList.contains('selected')){
                ui.selected.targets.remove(this);
                if(_status.multitarget||_status.event.complexSelect){
                    game.uncheck();
                    game.check();
                }
                else{
                    this.classList.remove('selected');
                }
            }
            else{
                ui.selected.targets.add(this);
                if(_status.event.name=='chooseTarget'||_status.event.name=='chooseToUse'||_status.event.name=='chooseCardTarget'){
                    var targetprompt=null;
                    if(_status.event.targetprompt){
                        targetprompt=_status.event.targetprompt;
                    }
                    else if(_status.event.skill&&!get.info(_status.event.skill).viewAs){
                        targetprompt=get.info(_status.event.skill).targetprompt;
                    }
                    else if(_status.event.name=='chooseToUse'){
                        var currentcard=get.card();
                        if(currentcard){
                            targetprompt=get.info(currentcard).targetprompt;
                        }
                    }
                    if(targetprompt){
                        if(Array.isArray(targetprompt)){
                            targetprompt=targetprompt[Math.min(targetprompt.length-1,ui.selected.targets.indexOf(this))];
                        }
                        else if(typeof targetprompt=='function'){
                            targetprompt=targetprompt(this);
                        }
                        if(targetprompt&&typeof targetprompt=='string'){
                            this.prompt(targetprompt);
                        }
                    }
                }
                this.classList.add('selected');
            }
            if(custom.add.target){
                custom.add.target();
            }
            game.check();
        },
        control2:function(){
            if(this.childNodes.length==1&&!this._doubleclick){
                ui.click.control.call(this.firstChild);
            }
        },
        control:function(){
            if(_status.dragged) return;
            if(ui.control.classList.contains('hidden')) return;
            var node=this.parentNode;
            if(node){
                if(node._doubleclick){
                    return;
                }
                else{
                    node._doubleclick=true;
                    setTimeout(function(){
                        node._doubleclick=false;
                    },500);
                }
                if(node.classList.contains('hidden')) return;
                if(node.classList.contains('removing')) return;
                if(node.classList.contains('disabled')) return;
            }
            if(ui.intro){
                ui.intro.close();
                delete ui.intro;
            }
            _status.clicked=true;
            if(this.parentNode.custom){
                this.parentNode.custom(this.link,this);
                return;
            }
            if(this.link=='ok'){
                ui.click.ok(this);
            }
            else if(this.link=='cancel'){
                ui.click.cancel(this);
            }
            else{
                _status.event.result={
                    buttons:ui.selected.buttons.slice(0),
                    cards:ui.selected.cards.slice(0),
                    targets:ui.selected.targets.slice(0),
                    control:this.link,
                    links:get.links(ui.selected.buttons)
                };
                if(this.parentNode.close!=false){
                    game.uncheck();
                    this.parentNode.close();
                }
                game.resume();
            }
        },
        dialogcontrol:function(){
            _status.event.result={
                buttons:ui.selected.buttons.slice(0),
                cards:ui.selected.cards.slice(0),
                targets:ui.selected.targets.slice(0),
                control:this.link,
                links:get.links(ui.selected.buttons)
            };
            game.resume();
        },
        skill:function(skill){
            var info=get.info(skill);
            var event=_status.event;
            event.backup(skill);
            if(info.filterCard&&info.discard!=false&&info.lose!=false&&!info.viewAs){
                var cards=event.player.getCards(event.position);
                for(var i=0;i<cards.length;i++){
                    if(!lib.filter.cardDiscardable(cards[i],event.player)){
                        cards[i].uncheck('useSkill');
                    }
                }
            }
            if(typeof event.skillDialog=='object'){
                event.skillDialog.close();
            }
            if(event.isMine()){
                event.skillDialog=true;
            }
            game.uncheck();
            game.check();
            if(event.skillDialog){
                var str=get.translation(skill);
                if(info.prompt){
                    var str2;
                    if(typeof info.prompt=='function'){
                        str2=info.prompt(event);
                    }
                    else{
                        str2=info.prompt;
                    }
                    event.skillDialog=ui.create.dialog(str,'<div><div style="width:100%;text-align:center">'+str2+'</div></div>');
                    if(info.longprompt){
                        event.skillDialog.forcebutton=true;
                        ui.update();
                    }
                }
                else if(info.promptfunc){
                    event.skillDialog=ui.create.dialog(str,'<div><div style="width:100%">'+info.promptfunc(event,event.player)+'</div></div>');
                }
                else if(lib.translate[skill+'_info']){
                    event.skillDialog=ui.create.dialog(str,'<div><div style="width:100%">'+lib.translate[skill+'_info']+'</div></div>');
                }
            }
        },
        ok:function(node){
            var event=_status.event;
            if(event.custom.replace.confirm){
                event.custom.replace.confirm(true);return;
            }
            event.result={
                buttons:ui.selected.buttons.slice(0),
                cards:ui.selected.cards.slice(0),
                targets:ui.selected.targets.slice(0),
                confirm:'ok',
                bool:true,
                links:get.links(ui.selected.buttons)
            };
            if(node){
                node.parentNode.close();
            }
            if(event.skill){
                event.result.skill=event.skill;
                event.result.card=get.copy(get.info(event.skill).viewAs);
                if(event.result.cards.length==1&&event.result.card){
                    event.result.card.suit=event.result.cards[0].suit;
                    event.result.card.number=event.result.cards[0].number;
                }
                if(event.skillDialog&&get.objtype(event.skillDialog)=='div'){
                    event.skillDialog.close();
                }
                var cards=event.player.getCards('hej');
                for(var i=0;i<cards.length;i++){
                    cards[i].recheck('useSkill');
                }
                event.restore();
            }
            if(ui.skills) ui.skills.close();
            if(ui.skills2) ui.skills2.close();
            if(ui.skills3) ui.skills3.close();
            game.uncheck();
            if(event.custom.add.confirm){
                event.custom.add.confirm(true);
            }
            game.resume();
        },
        cancel:function(node){
            var event=_status.event;
            if(event.custom.replace.confirm){
                event.custom.replace.confirm(false);return;
            }
            if(event.skill&&!event.norestore){
                if(event.skillDialog&&get.objtype(event.skillDialog)=='div'){
                    event.skillDialog.close();
                }
                if(typeof event.dialog=='string'&&event.isMine()){
                    event.dialog=ui.create.dialog(event.dialog);
                }
                if(_status.event.type=='phase'&&ui.confirm){
                    ui.confirm.classList.add('removing');
                }
                // ui.control.animate('nozoom',100);
                event.restore();
                var cards=event.player.getCards('hej');
                for(var i=0;i<cards.length;i++){
                    cards[i].recheck('useSkill');
                }
                game.uncheck();
                game.check();
                return;
            }
            event.result={
                confirm:'cancel',
                bool:false
            };
            if(node){
                node.parentNode.close();
            }
            if(ui.skills) ui.skills.close();
            if(ui.skills2) ui.skills2.close();
            if(ui.skills3) ui.skills3.close();
            game.uncheck();
            if(event.custom.add.confirm){
                event.custom.add.confirm(true);
            }
            game.resume();
        },
        logv:function(e){
            if(_status.currentlogv){
                if(_status.currentlogv==this) return;
                if(_status.logvtimeout){
                    clearTimeout(_status.logvtimeout);
                }
                var that=this;
                _status.logvtimeout=setTimeout(function(){
                    if(!_status.currentlogv){
                        _status.currentlogv=that;
                        ui.click.intro.call(that,e);
                    }
                },200);
                this.logvtimeout=_status.logvtimeout;
            }
            else{
                _status.currentlogv=this;
                ui.click.intro.call(this,e);
            }
        },
        logvleave:function(){
            if(_status.currentlogv==this){
                setTimeout(function(){
                    delete _status.currentlogv;
                },150);
            }
            if(this.logvtimeout){
                clearTimeout(this.logvtimeout);
                if(_status.logvtimeout==this.logvtimeout){
                    delete _status.logvtimeout;
                }
                delete this.logvtimeout;
            }
        },
        charactercard:function(name,sourcenode,noedit,resume,avatar){
            if(_status.dragged) return;
            if(lib.config.theme!='simple'){
                ui.window.classList.add('shortcutpaused');
                ui.menuContainer.classList.add('forceopaque');
            }
            else{
                ui.window.classList.add('systempaused');
                ui.menuContainer.classList.add('transparent2');
            }
            if(lib.config.blur_ui){
                ui.arena.classList.add('blur');
                ui.system.classList.add('blur');
                ui.menuContainer.classList.add('blur');
            }
            var layer=ui.create.div('.popup-container');
            var clicklayer=function(e){
                if(_status.touchpopping) return;
                if(_status.dragged) return;
                ui.window.classList.remove('shortcutpaused');
                ui.window.classList.remove('systempaused');
                ui.menuContainer.classList.remove('forceopaque');
                ui.menuContainer.classList.remove('transparent2');
                ui.arena.classList.remove('blur');
                ui.system.classList.remove('blur');
                ui.menuContainer.classList.remove('blur');
                this.delete();
                e.stopPropagation();
                if(resume) game.resume2();
                return false;
            }
            var uiintro=ui.create.div('.menubg.charactercard',layer);
            var playerbg=ui.create.div('.menubutton.large.ava',uiintro);
            var bg=ui.create.div('.avatar',playerbg,function(){
                if(changeskinfunc){
                    changeskinfunc();
                }
            }).setBackground(name,'character');
            var changeskinfunc=null;
            var nameskin=name;
            var nameskin2=name;
            var gzbool=false;
            if(nameskin.indexOf('gz_')==0){
                nameskin=nameskin.slice(3);
                gzbool=true;
            }
            var changeskin=function(){
                var node=ui.create.div('.changeskin','可换肤',playerbg);
                var avatars=ui.create.div('.avatars',playerbg);
                changeskinfunc=function(){
                    playerbg.classList.add('scroll');
                    if(node._created){
                        return;
                    }
                    node._created=true;
                    var createButtons=function(num){
                        if(!num) return;
                        if(num>=4){
                            avatars.classList.add('scroll');
                            if(lib.config.touchscreen){
                                lib.setScroll(avatars);
                            }
                        }
                        for(var i=0;i<=num;i++){
                            var button=ui.create.div(avatars,function(){
                                playerbg.classList.remove('scroll');
                                if(this._link){
                                    lib.config.skin[nameskin]=this._link;
                                    bg.style.backgroundImage=this.style.backgroundImage;
                                    if(sourcenode) sourcenode.style.backgroundImage=this.style.backgroundImage;
                                    if(avatar) avatar.style.backgroundImage=this.style.backgroundImage;
                                    game.saveConfig('skin',lib.config.skin);
                                }
                                else{
                                    delete lib.config.skin[nameskin];
                                    if(gzbool&&lib.character[nameskin2][4].contains('gzskin')&&lib.config.mode_config.guozhan.guozhanSkin){
                                        bg.setBackground(nameskin2,'character');
                                        if(sourcenode) sourcenode.setBackground(nameskin2,'character');
                                        if(avatar) avatar.setBackground(nameskin2,'character');
                                    }
                                    else{
                                        bg.setBackground(nameskin,'character');
                                        if(sourcenode) sourcenode.setBackground(nameskin,'character');
                                        if(avatar) avatar.setBackground(nameskin,'character');
                                    }
                                    game.saveConfig('skin',lib.config.skin);
                                }
                            });
                            button._link=i;
                            if(i){
                                button.setBackgroundImage('image/skin/'+nameskin+'/'+i+'.jpg');
                            }
                            else{
                                if(gzbool&&lib.character[nameskin2][4].contains('gzskin')&&lib.config.mode_config.guozhan.guozhanSkin) button.setBackground(nameskin2,'character','noskin');
                                else button.setBackground(nameskin,'character','noskin');
                            }
                        }
                    };
                    var num=1;
                    var loadImage=function(){
                        var img=new Image();
                        img.onload=function(){
                            num++;
                            loadImage();
                        }
                        img.onerror=function(){
                            num--;
                            createButtons(num);
                        }
                        img.src=lib.assetURL+'image/skin/'+nameskin+'/'+num+'.jpg';
                    }
                    if(lib.config.change_skin){
                        loadImage();
                    }
                    else{
                        createButtons(lib.skin[nameskin]);
                    }
                };
            };
            if(lib.config.change_skin){
                var img=new Image();
                img.onload=changeskin;
                img.src=lib.assetURL+'image/skin/'+nameskin+'/1.jpg';
            }
            else if(lib.config.debug&&lib.skin[nameskin]){
                changeskin();
            }
            var ban=ui.create.div('.menubutton.large.ban.character',uiintro,'禁用',function(e){
                if(this.classList.contains('unselectable')) return;
                if(typeof noedit=='string'){
                    this.classList.toggle('active');
                    var bannedname=noedit+'_banned';
                    if(!lib.config[bannedname]){
                        lib.config[bannedname]=[];
                    }
                    if(this.classList.contains('active')){
                        lib.config[bannedname].add(name);
                    }
                    else{
                        lib.config[bannedname].remove(name);
                    }
                    game.saveConfig(bannedname,lib.config[bannedname]);
                    ban.updateBanned();
                }
                else{
                    ui.click.touchpop();
                    ui.click.intro.call(this,e);
                    _status.clicked=true;
                }
            });
            ban.link=name;
            ban._banning='offline';
            ban.updateBanned=function(){
                if(noedit===true) return;
                if(lib.config[get.mode()+'_banned']&&lib.config[get.mode()+'_banned'].contains(name)){
                    ban.classList.add('active');
                }
                else{
                    ban.classList.remove('active');
                }
                if(sourcenode&&sourcenode.updateBanned){
                    sourcenode.updateBanned();
                }
            };
            ban.updateBanned();
            var fav=ui.create.div('.menubutton.large.fav',uiintro,'收藏',function(){
                if(this.classList.contains('unselectable')) return;
                this.classList.toggle('active');
                if(this.classList.contains('active')){
                    lib.config.favouriteCharacter.add(name);
                }
                else{
                    lib.config.favouriteCharacter.remove(name);
                }
                game.saveConfig('favouriteCharacter',lib.config.favouriteCharacter);
            });
            if(noedit===true){
                fav.classList.add('unselectable');
                ban.classList.add('unselectable');
            }
            else if(lib.config.favouriteCharacter.contains(name)){
                fav.classList.add('active');
            }
            var intro=ui.create.div('.characterintro',get.characterIntro(name),uiintro);
            var intro2=ui.create.div('.characterintro.intro2',uiintro);
            var list=get.character(name,3)||[];
            var skills=ui.create.div('.characterskill',uiintro);
            if(lib.config.touchscreen){
                lib.setScroll(intro);
                lib.setScroll(intro2);
                lib.setScroll(skills);
            }

            if(lib.config.mousewheel){
                skills.onmousewheel=ui.click.mousewheel;
            }
            var clickSkill=function(e){
                var current=this.parentNode.querySelector('.active');
                if(current){
                    current.classList.remove('active');
                }
                this.classList.add('active');
                intro2.innerHTML='<span style="font-weight:bold;margin-right:5px">'+get.translation(this.link)+'</span>'+get.skillInfoTranslation(this.link);
                var info=get.info(this.link);
                var skill=this.link;
                var skillnode=this;
                if(info.derivation){
                    var derivation=info.derivation;
                    if(typeof derivation=='string'){
                        derivation=[derivation];
                    }
                    for(var i=0;i<derivation.length;i++){
                        intro2.innerHTML+='<br><br><span style="font-weight:bold;margin-right:5px">'+get.translation(derivation[i])+'</span>'+get.skillInfoTranslation(derivation[i]);
                    }
                }
                if(info.alter){
                    intro2.innerHTML+='<br><br><div class="hrefnode skillversion"></div>';
                    var skillversionnode=intro2.querySelector('.hrefnode.skillversion');
                    if(lib.config.vintageSkills.contains(skill)){
                        skillversionnode.innerHTML='切换至新版';
                    }
                    else{
                        skillversionnode.innerHTML='切换至旧版';
                    }
                    skillversionnode.listen(function(){
                        if(lib.config.vintageSkills.contains(skill)){
                            lib.config.vintageSkills.remove(skill);
                            lib.translate[skill+'_info']=lib.translate[skill+'_info_alter'];
                        }
                        else{
                            lib.config.vintageSkills.push(skill);
                            lib.translate[skill+'_info']=lib.translate[skill+'_info_origin'];
                        }
                        game.saveConfig('vintageSkills',lib.config.vintageSkills);
                        clickSkill.call(skillnode,'init');
                    });
                }
                if(lib.config.background_speak&&e!=='init'){
                    var audioname=this.link;
                    var audioinfo=info.audio;
                    var that=this;
                    var getIndex=function(i){
                        if(typeof that.audioindex!='number'){
                            that.audioindex=i;
                        }
                        that.audioindex++;
                        if(that.audioindex>i){
                            that.audioindex=1;
                        }
                        return that.audioindex;
                    };
                    if(typeof audioinfo=='string'){
                        if(audioinfo.indexOf('ext:')==0){
                            audioinfo=audioinfo.split(':');
                            if(audioinfo.length==3){
                                if(audioinfo[2]=='true'){
                                    game.playAudio('..','extension',audioinfo[1],audioname);
                                }
                                else{
                                    audioinfo[2]=parseInt(audioinfo[2]);
                                    if(audioinfo[2]){
                                        game.playAudio('..','extension',audioinfo[1],audioname+getIndex(audioinfo[2]));
                                    }
                                }
                            }
                            return;
                        }
                        else{
                            audioname=audioinfo;
                            if(lib.skill[audioinfo]){
                                audioinfo=lib.skill[audioinfo].audio;
                            }
                        }
                    }
                    else if(Array.isArray(audioinfo)){
                        audioname=audioinfo[0];
                        audioinfo=audioinfo[1];
                    }
                    if(typeof audioinfo=='number'){
                        game.playAudio('skill',audioname+getIndex(audioinfo));
                    }
                    else if(audioinfo){
                        game.playAudio('skill',audioname);
                    }
                    else if(true&&info.audio!==false){
                        game.playSkillAudio(audioname,getIndex(2));
                    }
                }
            }
            var initskill=false;
            for(var i=0;i<list.length;i++){
                if(!get.info(list[i])||get.info(list[i]).nopop) continue;
                if(!lib.translate[list[i]]||!lib.translate[list[i]+'_info']) continue;
                var skilltrans=get.translation(list[i]);
                if(skilltrans.indexOf('&nbsp;')==0){
                    skilltrans=skilltrans.slice(6);
                }
                var current=ui.create.div('.menubutton.large',skills,clickSkill,skilltrans);
                current.link=list[i];
                if(!initskill){
                    initskill=true;
                    clickSkill.call(current,'init');
                }
            }

            uiintro.addEventListener(lib.config.touchscreen?'touchend':'click',ui.click.touchpop);
            layer.addEventListener(lib.config.touchscreen?'touchend':'click',clicklayer);
            ui.window.appendChild(layer);
        },
        intro:function(e){
            if(_status.dragged) return;
            _status.clicked=true;
            if(this.classList.contains('player')&&!this.name){
                return;
            }
            if(this.parentNode==ui.historybar){
                if(ui.historybar.style.zIndex=='22'){
                    if(_status.removePop){
                        if(_status.removePop(this)==false) return;
                    }
                    else{
                        return;
                    }
                }
                ui.historybar.style.zIndex=22;
            }
            var uiintro;
            if(this.classList.contains('card')&&this.parentNode&&
            this.parentNode.classList.contains('equips')&&get.is.phoneLayout()&&
            !get.is.mobileMe(this.parentNode.parentNode)){
                uiintro=get.nodeintro(this.parentNode.parentNode,false,e);
            }
            uiintro=uiintro||get.nodeintro(this,false,e);
            if(!uiintro) return;
            uiintro.classList.add('popped');
            uiintro.classList.add('static');
            ui.window.appendChild(uiintro);
            var layer=ui.create.div('.poplayer',ui.window);
            var clicklayer=function(e){
                if(_status.touchpopping) return;
                delete _status.removePop;
                uiintro.delete();
                this.remove();
                ui.historybar.style.zIndex='';
                delete _status.currentlogv;
                if(!ui.arena.classList.contains('menupaused')&&!uiintro.noresume) game.resume2();
                if(e&&e.stopPropagation) e.stopPropagation();
                if(uiintro._onclose){
                    uiintro._onclose();
                }
                return false;
            }
            layer.addEventListener(lib.config.touchscreen?'touchend':'click',clicklayer);
            if(!lib.config.touchscreen) layer.oncontextmenu=clicklayer;
            if(this.parentNode==ui.historybar&&lib.config.touchscreen){
                var rect=this.getBoundingClientRect();
                e={clientX:0,clientY:rect.top+30};
            }
            lib.placePoppedDialog(uiintro,e);
            if(this.parentNode==ui.historybar){
                if(lib.config.show_history=='right'){
                    uiintro.style.left=(ui.historybar.offsetLeft-230)+'px';
                }
                else{
                    uiintro.style.left=(ui.historybar.offsetLeft+60)+'px';
                }
            }
            uiintro.style.zIndex=21;
            var clickintro=function(){
                if(_status.touchpopping) return;
                delete _status.removePop;
                layer.remove();
                this.delete();
                ui.historybar.style.zIndex='';
                delete _status.currentlogv;
                if(!ui.arena.classList.contains('menupaused')&&!uiintro.noresume) game.resume2();
                if(uiintro._onclose){
                    uiintro._onclose();
                }
            };
            var currentpop=this;
            _status.removePop=function(node){
                if(node==currentpop) return false;
                layer.remove();
                uiintro.delete();
                delete _status.removePop;
                return true;
            };
            if(uiintro.clickintro){
                uiintro.listen(function(){
                    _status.clicked=true;
                });
                uiintro._clickintro=clicklayer;
            }
            else if(!lib.config.touchscreen){
                uiintro.addEventListener('mouseleave',clickintro);
                uiintro.addEventListener('click',clickintro);
            }
            else if(uiintro.touchclose){
                uiintro.listen(clickintro);
            }
            uiintro._close=clicklayer;

            game.pause2();
            return uiintro;
        },
        intro2:function(){
            if(ui.intro){
                ui.intro.close();
                if(ui.intro.source==this){
                    delete ui.intro;
                    ui.control.show();
                    game.resume2();
                    return;
                }
            }
        },
        auto:function(){
            if(ui.auto.classList.contains('hidden')&&arguments[0]!=='forced') return;
            if(_status.paused2) return;
            ui.click.shortcut(false);
            if(!_status.auto){
                _status.auto=true;
                ui.auto.classList.add('glow');
                ui.arena.classList.add('auto');

                if(_status.imchoosing&&_status.paused){
                    if(ui.confirm) ui.confirm.close();
                    ui.control.hide();
                    if(_status.event.switchToAuto){
                        _status.event.switchToAuto();
                    }
                    else{
                        if(_status.paused&&_status.imchoosing){
                            game.uncheck();
                            _status.event.redo();
                        }
                    }
                    game.resume();
                }
                else if(_status.event.switchToAuto){
                    _status.event.switchToAuto();
                }
                if(game.online){
                    game.send('auto');
                }
                else if(_status.connectMode){
                    game.broadcastAll(function(player){
                        player.setNickname(player.nickname+' - 托管');
                    },game.me);
                }
            }
            else{
                ui.control.show();
                _status.auto=false;
                ui.auto.classList.remove('glow');
                ui.arena.classList.remove('auto');

                if(game.online){
                    game.send('unauto');
                }
                else if(_status.connectMode){
                    game.broadcastAll(function(player){
                        player.setNickname(player.nickname);
                    },game.me);
                }
            }
        },
        wuxie:function(){
            if(this.classList.contains('hidden')) return;
            this.classList.toggle('glow');
            if(this.classList.contains('glow')&&_status.event.type=='wuxie'&&
            _status.event.isMine()&&ui.confirm&&_status.imchoosing){
                ui.click.cancel(ui.confirm.lastChild);
            }
        },
        tempnowuxie:function(){
            if(this.classList.contains('hidden')) return;
            this.classList.toggle('glow');
            if(this.classList.contains('glow')&&_status.event.type=='wuxie'&&
            _status.event.isMine()&&ui.confirm&&_status.imchoosing){
                var triggerevent=_status.event.getTrigger();
                if(triggerevent&&this._origin==triggerevent.parent.id){
                    if(triggerevent.targets&&triggerevent.num==triggerevent.targets.length-1){
                        this.close();
                    }
                }
                ui.click.cancel(ui.confirm.lastChild);
            }
        },
        pause:function(){
            if(_status.paused2) return;
            if(_status.nopause) return;
            if(!_status.video){
                if(ui.pause.classList.contains('hidden')) return;
                if(!_status.gameStarted) return;
            }
            ui.system.hide();
            game.pause2();
            var node=ui.create.pause().animate('start');
            ui.sidebar3.innerHTML='';
            if(lib.config.show_discardpile){
                for(var i=0;i<ui.discardPile.childNodes.length;i++){
                    var div=ui.create.div(ui.sidebar3);
                    div.innerHTML=get.translation(ui.discardPile.childNodes[i]);
                    ui.sidebar3.insertBefore(div,ui.sidebar3.firstChild);
                }
            }
            node.appendChild(ui.sidebar);
            node.appendChild(ui.sidebar3);
            ui.historybar.classList.add('paused');
            ui.arena.classList.add('paused');
            ui.window.classList.add('touchinfohidden');
            ui.time.hide();
            if(game.onpause){
                game.onpause();
            }
        },
        resume:function(e){
            if(_status.pausing) return;
            if(_status.dragged) return;
            if(_status.clicked) return;
            this.delete();
            ui.system.show();
            ui.time.show();
            ui.historybar.classList.remove('paused');
            ui.arena.classList.remove('paused');
            ui.window.classList.remove('touchinfohidden');
            game.resume2();
            e.stopPropagation();
            if(game.onresume){
                game.onresume();
            }
            return false;
        },
        config:function(){
            if(!ui.click.configMenu) return;
            if(_status.paused2) _status.config2=false;
            else _status.config2=true;

            _status.clicked=true;
            game.pause2();
            ui.click.configMenu();
            ui.system1.classList.remove('shown');
            ui.system2.classList.remove('shown');
        },
        swap:function(){
            if(_status.dragged) return;
            if(this.classList.contains('dead')) return;
            if(_status.over) return;
            if(ui.auto) ui.auto.show();
            if(ui.wuxie) ui.wuxie.show();
            game.swapPlayer(this);
        },
        mousewheel:function(evt){
            if(this.firstChild&&this.firstChild.classList.contains('handcards')&&
                !this.classList.contains('scrollh')) return;
            var node=this;
            var num=this._scrollnum||6;
            var speed=this._scrollspeed||16;
            clearInterval(node.interval);
            if(evt.detail > 0 || evt.wheelDelta < 0){
                node.interval=setInterval(function(){
                    if(num--&&Math.abs(node.scrollLeft+node.clientWidth-node.scrollWidth)>0){
                        node.scrollLeft +=speed;
                    }
                    else{
                        clearInterval(node.interval);
                    }
                },16);
            }
            else{
                node.interval=setInterval(function(){
                    if(num--&&node.scrollLeft>0){
                        node.scrollLeft -=speed;
                    }
                    else{
                        clearInterval(node.interval);
                    }
                },16);
            }
        },
        touchStart:function(e){
            this.startX=e.touches[0].clientX/game.documentZoom;
            this.startY=e.touches[0].clientY/game.documentZoom;
            _status.dragged=false;
        },
        dialogtouchStart:function(e){
            ui.click.touchStart.call(this,e);
            _status.dialogtouched=true;
        },
        touchScroll:function(e) {
            if(_status.mousedragging) return;
            if(_status.draggingtouchdialog) return;
            if(!_status.dragged){
                if (Math.abs(e.touches[0].clientX/game.documentZoom - this.startX) > 10 ||
                    Math.abs(e.touches[0].clientY/game.documentZoom - this.startY) > 10) {
                    _status.dragged=true;
                }
            }
            if((this==ui.handcards1Container||this==ui.handcards2Container)&&!this.classList.contains('scrollh')){
                e.preventDefault();
            }
            else if(lib.device=='ios'&&this.scrollHeight<=this.offsetHeight+5&&this.scrollWidth<=this.offsetWidth+5){
                e.preventDefault();
            }
            else{
                delete _status._swipeorigin;
                e.stopPropagation();
            }
        },
        autoskill:function(bool,node){
            var list=lib.config.autoskilllist;
            if(bool){
                list.remove(node.link);
            }
            else{
                list.add(node.link);
            }
            game.saveConfig('autoskilllist',list);
        },
        skillbutton:function(){
            this.func(this.link);
        },
        autoskill2:function(e){
            this.classList.toggle('on');
            var list=[];
            if(lib.skill[this.link].frequent){
                list.push(this.link);
            }
            if(lib.skill[this.link].subfrequent){
                for(var i=0;i<lib.skill[this.link].subfrequent.length;i++){
                    list.push(this.link+'_'+lib.skill[this.link].subfrequent[i]);
                }
            }
            for(var i=0;i<list.length;i++){
                if(this.classList.contains('on')){
                    lib.config.autoskilllist.remove(list[i]);
                }
                else{
                    lib.config.autoskilllist.add(list[i]);
                }
            }
            game.saveConfig('autoskilllist',lib.config.autoskilllist);
            ui.click.touchpop();
            e.stopPropagation();
        },
        // forcetouch:function(){
        // 	if(_status.force||_status.dragged){
        // 		clearInterval(_status.forcetouchinterval);
        // 		delete _status.forcetouchinterval;
        // 		return;
        // 	}
        // 	window.ForceTouch.getForceTouchData(function(ForceTouchData){
        // 		if(ForceTouchData.touches[0]){
        // 			var force = parseFloat(ForceTouchData.touches[0].force);
        // 			if(force > 0.2){
        // 				_status.force=true;
        // 				var taptic=false;
        // 				if(_status.longpressing){
        // 					delete _status.longpressing._waitingfordrag;
        // 					ui.click.touchpop();
        // 					ui.click.longpresscallback.call(_status.longpressing);
        // 					taptic=true;
        // 				}
        // 				else if(!_status.forceright){
        // 					_status.forceright=true;
        // 					setTimeout(function(){
        // 						_status.forceright=false;
        // 					},600);
        // 					if(_status.mousedragging){
        // 						_status.mousedragging=null;
        // 						_status.mouseleft=false;
        // 						_status.mousedragorigin=null;
        // 						_status.dragstatuschanged=false;
        // 						game.uncheck();
        // 						game.check();
        // 					}
        // 					switch(lib.config.pressure_click){
        // 						case 'pause':ui.click.pause();break;
        // 						case 'auto':ui.click.auto();break;
        // 						case 'config':ui.click.config();break;
        // 					}
        // 					taptic=true;
        // 				}
        // 				if(taptic&&lib.config.pressure_taptic){
        // 					if(window.TapticEngine){
        // 						window.TapticEngine.generateTapticFeedback();
        // 					}
        // 					else{
        // 						game.vibrate(50);
        // 					}
        // 				}
        // 			}
        // 		}
        // 	});
        // },
        // pressurepause:function(force,event){
        // 	if(!_status.force&&!_status.mousedragging&&force>=0.5&&!_status.forceright){
        // 		_status.force=true;
        // 		_status.forceright=true;
        // 		setTimeout(function(){
        // 			_status.forceright=false;
        // 		},600);
        // 		switch(lib.config.pressure_click){
        // 			case 'pause':ui.click.pause();break;
        // 			case 'auto':ui.click.auto();break;
        // 			case 'config':ui.click.config();break;
        // 		}
        // 	}
        // },
        // rightpressure:function(force, event){
        // 	if(force>0){
        // 		_status.force=true;
        // 	}
        // 	if(force>=0.5){
        // 		if(_status.mousedragging){
        // 			_status.mousedragging=null;
        // 			_status.mouseleft=false;
        // 			_status.mousedragorigin=null;
        // 			_status.dragstatuschanged=false;
        // 			game.uncheck();
        // 			game.check();
        // 		}
        // 		ui.click.rightplayer.call(this,event);
        // 		_status.clickedplayer=false;
        // 	}
        // },
        rightplayer:function(e){
            if(this._nopup) return false;
            if(_status.clickedplayer){
                return false;
            }

            if(this._mouseenterdialog&&this._mouseenterdialog.parentNode){
                this._mouseenterdialog.delete();
            }
            else{
                ui.click.intro.call(this,e);
            }
            _status.clickedplayer=true;
            _status.clicked=false;
            ui.click.longpresscancel.call(this);
            return false;
        },
        right:function(e){
            if(window.inSplash) return false;
            if(lib.config.touchscreen) return;
            if(_status.noright){
                _status.noright=false;
                return false;
            }
            if(_status.clickedplayer){
                _status.clickedplayer=false;
                return;
            }
            game.closePopped();
            switch(lib.config.right_click){
                case 'shortcut':ui.click.shortcut();break;
                case 'pause':ui.click.pause();break;
                case 'auto':ui.click.auto();break;
                case 'config':ui.click.config();break;
            }
            e.preventDefault();
            return false;
        },
    },
    selected:{
        buttons:[],cards:[],targets:[]
    },
    clear:function(){
        game.addVideo('uiClear');
        var thrown=document.getElementsByClassName('thrown');
        var nodes=[];
        var i;
        for(i=0;i<thrown.length;i++){
            nodes.push(thrown[i]);
        }
        for(i=0;i<nodes.length;i++){
            if(!nodes[i].fixed) nodes[i].delete();
        }
    },
    updatec:function(){
        if(_status.noupdatec) return;
        var length=0;
        var controls=[];
        var widths=[];
        var add=function(node,first){
            var thiswidth=parseInt(node.style.width);
            if(thiswidth){
                thiswidth+=8;
                length+=thiswidth;
                if(first){
                    widths.unshift(thiswidth);
                }
                else{
                    widths.push(thiswidth);
                }
            }
            else{
                length+=node.offsetWidth;
                if(first){
                    widths.unshift(node.offsetWidth);
                }
                else{
                    widths.push(node.offsetWidth);
                }
            }
            if(first){
                controls.unshift(node);
            }
            else{
                controls.push(node);
            }
        }
        var stayleft=null;
        for(var i=0;i<ui.control.childNodes.length;i++){
            if(ui.control.childNodes[i].classList.contains('removing')) continue;
            if(!stayleft&&lib.config.wuxie_right&&ui.control.childNodes[i].stayleft){
                stayleft=ui.control.childNodes[i];
            }
            else{
                add(ui.control.childNodes[i]);
            }
        }
        if(stayleft){
            var fullwidth=0;
            var fullright=(game.layout=='long'||game.layout=='long2'||game.chess||(game.layout!='nova'&&parseInt(ui.arena.dataset.number)<=5));
            for(var i=0;i<widths.length;i++){
                fullwidth+=widths[i]+6;
                if(get.is.phoneLayout()) fullwidth+=6;
            }
            fullwidth/=2;
            fullwidth+=stayleft.offsetWidth;
            if(get.is.phoneLayout()){
                fullwidth+=18;
            }
            else{
                fullwidth+=12;
            }
            if(fullright){
                fullwidth+=124;
                if((game.layout=='long2'||game.layout=='nova')&&ui.arena.dataset.number=='8'&&get.mode()!='boss'){
                    fullwidth+=game.me.getLeft();
                }
            }
            else{
                fullwidth+=154;
            }
            if(game.layout!='default'&&game.layout!='newlayout'&&ui.arena.offsetWidth/2>=fullwidth){
                var current_offset=stayleft._offset;
                if(fullright){
                    stayleft._offset=Math.ceil(-ui.arena.offsetWidth/2)+135;
                    if((game.layout=='long2'||game.layout=='nova')&&ui.arena.dataset.number=='8'&&get.mode()!='boss'){
                        stayleft._offset+=game.me.getLeft();
                    }
                }
                else{
                    stayleft._offset=Math.ceil(-ui.arena.offsetWidth/2)+165;
                }
                if(current_offset!=stayleft._offset){
                    stayleft.animate('controlpressdownx',500);
                    stayleft.style.transform='translateX('+stayleft._offset+'px)';
                }
            }
            else{
                add(stayleft,true);
            }
        }
        if(!controls.length) return;
        var offset=-length/2;
        var control=controls.shift();
        if(control._offset!=offset){
            control.animate('controlpressdownx',500);
            control.style.transform='translateX('+offset+'px)';
            control._offset=offset;
        }
        while(controls.length){
            var control=controls.shift();
            var width=widths.shift();
            offset+=width+6;
            if(get.is.phoneLayout()){
                offset+=6;
            }
            if(control._offset!=offset){
                control.animate('controlpressdownx',500);
                control.style.transform='translateX('+offset+'px)';
                control._offset=offset;
            }
        }
    },
    updatex:function(){
        ui.update.apply(this,arguments);
        ui.updatehl();
        for(var i=0;i<lib.onresize.length;i++){
            lib.onresize[i]();
        }
        var cfg=game.documentZoom/game.deviceZoom;
        ui.updated();
        game.documentZoom=cfg*game.deviceZoom;
        ui.updatez();
        delete ui._updatexr;
    },
    updatexr:function(){
        if(ui._updatexr){
            clearTimeout(ui._updatexr);
        }
        ui._updatexr=setTimeout(ui.updatex,500);
    },
    updatejm:function(player,nodes,start,inv){
        if(typeof start!='number'){
            start=0;
        }
        var str;
        if(get.is.mobileMe(player)||game.layout=='default'||player.classList.contains('linked')){
            str='translateX(';
            if(inv){
                str+='-';
            }
        }
        else{
            str='translateY(';
        }
        var num=0;
        for(var i=0;i<nodes.childElementCount;i++){
            var node=nodes.childNodes[i];
            if(i<start){
                node.style.transform='';
            }
            else if(node.classList.contains('removing')){
                start++;
            }
            else{
                ui.refresh(node);
                node.classList.remove('drawinghidden');
                node._transform=str+((i-start)*28)+'px)';
                node.style.transform=node._transform;
            }
        }
    },
    updatem:function(player){
        if(player){
            var start=0;
            if(!player.classList.contains('linked2')||!ui.arena.classList.contains('nolink')){
                start=1;
            }
            ui.updatejm(player,player.node.marks,start,get.is.mobileMe(player));
        }
        else{
            for(var i=0;i<game.players.length;i++){
                ui.updatem(game.players[i]);
            }
        }
    },
    updatej:function(player){
        if(player){
            ui.updatejm(player,player.node.judges);
        }
        else{
            for(var i=0;i<game.players.length;i++){
                ui.updatej(game.players[i]);
            }
        }
    },
    updatehl:function(){
        if(!game.me) return;
        if(!ui.handcards1Container||!ui.handcards2Container) return;
        if(!ui.handcards1Container.childNodes.length) return;
        var hs1=[],hs2=[];
        for(var i=0;i<ui.handcards1Container.firstChild.childElementCount;i++){
            if(!ui.handcards1Container.firstChild.childNodes[i].classList.contains('removing')){
                hs1.push(ui.handcards1Container.firstChild.childNodes[i]);
            }
        }
        for(var i=0;i<ui.handcards2Container.firstChild.childElementCount;i++){
            if(!ui.handcards2Container.firstChild.childNodes[i].classList.contains('removing')){
                hs2.push(ui.handcards2Container.firstChild.childNodes[i]);
            }
        }
        var offset1,offset12=0;
        if(!lib.config.fold_card){
            offset1=112;
            ui.handcards1Container.classList.add('scrollh');
        }
        else{
            offset1=Math.min(112,(ui.handcards1Container.offsetWidth-128)/(hs1.length-1));
            if(hs1.length>1&&offset1<32){
                offset1=32;
                ui.handcards1Container.classList.add('scrollh');
            }
            else{
                ui.handcards1Container.classList.remove('scrollh');
            }
        }
        if(offset1<100){
            offset12=100-offset1;
        }
        for(var i=0;i<hs1.length;i++){
            hs1[i].style.transform='translateX('+(i*offset1)+'px)';
            hs1[i]._transform='translateX('+(i*offset1)+'px)';
            ui.refresh(hs1[i]);
            hs1[i].classList.remove('drawinghidden');
            if(offset12>40){
                offset12=90-hs1[i].node.info.offsetWidth;
                hs1[i].node.info.querySelector('span').style.display='none';
                if(hs1[i].node.name.classList.contains('long')){
                    hs1[i].node.name.style.transform='translateY(16px)  scale(0.85)';
                    hs1[i].node.name.style.transformOrigin='top left';
                }
                else{
                    hs1[i].node.name.style.transform='translateY(16px)';
                }
                hs1[i].node.info.style.transform='translateX(-'+offset12+'px) translateY(-3px)';
            }
            else{
                hs1[i].node.info.querySelector('span').style.display='';
                hs1[i].node.name.style.transform='';
                hs1[i].node.name.style.transformOrigin='';
                hs1[i].node.info.style.transform='translateX(-'+offset12+'px)';
            }
        }
        ui.handcards1Container.firstChild.style.width=(offset1*(hs1.length-1)+118)+'px';

        var offset2,offset22=0;
        if(!lib.config.fold_card){
            offset2=112;
            ui.handcards2Container.classList.add('scrollh');
        }
        else{
            offset2=Math.min(112,(ui.handcards2Container.offsetWidth-128)/(hs2.length-1));
            if(hs2.length>1&&offset2<32){
                offset2=32;
                ui.handcards2Container.classList.add('scrollh');
            }
            else{
                ui.handcards2Container.classList.remove('scrollh');
            }
        }
        if(offset2<100){
            offset22=100-offset2;
        }
        for(var i=0;i<hs2.length;i++){
            hs2[i].style.transform='translateX('+(i*offset2)+'px)';
            hs2[i]._transform='translateX('+(i*offset2)+'px)';
            ui.refresh(hs2[i]);
            hs2[i].classList.remove('drawinghidden');
            if(offset22>40){
                offset22=90-hs2[i].node.info.offsetWidth;
                hs2[i].node.info.querySelector('span').style.display='none';
                if(hs2[i].node.name.classList.contains('long')){
                    hs2[i].node.name.style.transform='translateY(16px)  scale(0.85)';
                    hs2[i].node.name.style.transformOrigin='top left';
                }
                else{
                    hs2[i].node.name.style.transform='translateY(16px)';
                }
                hs2[i].node.info.style.transform='translateX(-'+offset22+'px) translateY(-3px)';
            }
            else{
                hs2[i].node.info.querySelector('span').style.display='';
                hs2[i].node.name.style.transform='';
                hs2[i].node.name.style.transformOrigin='';
                hs2[i].node.info.style.transform='translateX(-'+offset22+'px)';
            }
        }
        ui.handcards2Container.firstChild.style.width=(offset2*(hs2.length-1)+118)+'px';
    },
    updateh:function(compute){
        if(!game.me) return;
        if(!ui.handcards1Container) return;
        if(lib.config.low_performance){
            if(compute){
                ui.updatehl();
                setTimeout(ui.updatehl,1000);
            }
            return;
        }
        if(compute){
            ui.handcards1Container._handcardsWidth=ui.handcards1Container.offsetWidth;
            ui.handcards2Container._handcardsWidth=ui.handcards2Container.offsetWidth;
        }
        ui.updatehx(game.me.node.handcards1);
        ui.updatehx(game.me.node.handcards2);
    },
    updatehx:function(node){
        var width=node.parentNode._handcardsWidth;
        var num=node.childElementCount-node.getElementsByClassName('removing').length;
        node.classList.remove('fold0');
        node.classList.remove('fold1');
        node.classList.remove('fold2');
        node.classList.remove('fold3');
        if(num*78+40>=width){
            // node.dataset.fold=3;
            node.classList.add('fold3');
        }
        else if(num*93+25>=width){
            // node.dataset.fold=2;
            node.classList.add('fold2');
        }
        else if(num*112+6>=width){
            // node.dataset.fold=1;
            node.classList.add('fold1');
        }
        else{
            // node.dataset.fold=0;
            node.classList.add('fold0');
        }
    },
    updated:function(){
        if (document.documentElement.offsetWidth<900 || document.documentElement.offsetHeight < 500) {
            game.deviceZoom=Math.min(
                Math.round(document.documentElement.offsetWidth/98)/10,
                Math.round(document.documentElement.offsetHeight/50)/10
            );
        }
        else {
            game.deviceZoom=1;
        }
    },
    updatez:function(){
        var width=document.documentElement.offsetWidth;
        var height=document.documentElement.offsetHeight;
        var zoom=game.documentZoom;
        if(zoom!=1){
            document.body.style.width=Math.round(width/zoom)+'px';
            document.body.style.height=Math.round(height/zoom)+'px';
            document.body.style.transform='scale('+(Math.floor(zoom*100)/100)+')';
        }
        else{
            document.body.style.width=width+'px';
            document.body.style.height=height+'px';
            document.body.style.transform='';
        }
    },
    update:function(){
        for(var i=0;i<ui.updates.length;i++){
            ui.updates[i]();
        }
        if(ui.dialog&&!ui.dialog.classList.contains('noupdate')){
            if(game.chess){
                if(ui.dialog.content.scrollHeight<240&&(!ui.dialog.buttons||!ui.dialog.buttons.length)&&!ui.dialog.forcebutton){
                    ui.dialog.style.height=ui.dialog.content.offsetHeight+'px';
                    ui.dialog.classList.add('slim');
                }
                else{
                    ui.dialog.style.height='';
                    ui.dialog.classList.remove('slim');
                }
            }
            else{
                if((!ui.dialog.buttons||!ui.dialog.buttons.length)&&!ui.dialog.forcebutton&&ui.dialog.classList.contains('fullheight')==false&&get.mode()!='stone'){
                    ui.dialog.classList.add('nobutton');
                    if(ui.dialog.content.offsetHeight<240){
                        if(!ui.dialog._heightset){
                            ui.dialog._heightset=ui.dialog.style.height||true;
                        }
                        ui.dialog.style.height=ui.dialog.content.offsetHeight+'px';
                        if(lib.config.show_log!='off'){
                            ui.dialog.classList.add('scroll1');
                            ui.dialog.classList.add('scroll2');
                            return;
                        }
                    }
                    else{
                        if(typeof ui.dialog._heightset=='string'){
                            ui.dialog.style.height=ui.dialog._heightset;
                        }
                        else if(ui.dialog._heightset){
                            ui.dialog.style.height='';
                        }
                        delete ui.dialog._heightset;
                    }
                }
                else{
                    if(typeof ui.dialog._heightset=='string'){
                        ui.dialog.style.height=ui.dialog._heightset;
                    }
                    else if(ui.dialog._heightset){
                        ui.dialog.style.height='';
                    }
                    delete ui.dialog._heightset;
                    ui.dialog.classList.remove('nobutton');
                }
            }
            var height1=ui.dialog.content.offsetHeight;
            var height2=ui.dialog.contentContainer.offsetHeight;
            if(game.chess){
                if(height1<240){
                    ui.dialog.style.height=height1+'px';
                }
            }
            else{
                if(!ui.dialog.forcebutton&&!ui.dialog._scrollset&&(height1<=190||(height2>=height1&&height2>=210))){
                    ui.dialog.classList.remove('scroll1');
                    ui.dialog.classList.remove('scroll2');
                }
                else{
                    ui.dialog.classList.add('scroll1');
                    ui.dialog.classList.add('scroll2');
                    if(game.layout!='default'){
                        ui.dialog.style.height=Math.min(height1,((game.layout=='long2'||game.layout=='nova')&&ui.arena.classList.contains('choose-character'))?380:350)+'px';
                        ui.dialog._scrollset=true;
                    }
                }
                if(game.layout=='long2'||game.layout=='nova'){
                    if(height1+240>=ui.arena.offsetHeight){
                        ui.dialog.classList.add('scroll3');
                    }
                    else{
                        ui.dialog.classList.remove('scroll3');
                    }
                }
            }
        }
    },
    recycle:function(node,key){
        if(!ui._recycle) ui._recycle={};
        if(typeof node=='string'){
            return ui._recycle[node]
        }
        ui._recycle[key]=node;
    },
}