declare var ui:UI;
interface UI {
    updates:[],
    thrown:[],
    touchlines:[],
    todiscard:{},
    refresh(node):any;
    create:{
        div():any;
        filediv():any;
        node():any;
        iframe(src):any;
        identitycircle(list,target):any;
        chat():any;
        exit():any;
        connecting(bool):any;
        roomInfo():any;
        templayer(time):any;
        selectlist(list,init,position,onchange):any;
        menu(connectMenu):any;
        table():any;
        giveup():any;
        groupControl(dialog):any;
        cardDialog():any;
        characterDialog2(filter):any;
        characterDialog():any;
        dialog():any;
        line2():any;
        line():any;
        switcher(name,current,current2):any;
        caption(str,position):any;
        control():any;
        confirm(str,func):any;
        skills(skills):any;
        skills2(skills):any;
        skills3(skills):any;
        arena():any;
        system(str,func,right,before):any;
        pause():any;
        prebutton(item,type,position,noclick):any;
        button(item,type,position,noclick,node):any;
        buttons(list,type,position,noclick,zoom):any;
        player(position,noclick):any;
        connectPlayers(ip):any;
        players(num):any;
        me(hasme):any;
        card(position,info,noclick):any;
        cardsAsync():any;
        cards(ordered):any;
    },
    click:{
        identitycircle():any;
        connectEvents():any;
        connectClients():any;
        autoskin():any;
        skin(avatar,name,callback):any;
        touchpop(forced):any;
        exit():any;
        shortcut(show):any;
        favouriteCharacter(e):any;
        buttonnameenter():any;
        buttonnameleave():any;
        dragtouchdialog(e):any;
        identity(e):any;
        identity2():any;
        roundmenu():any;
        pausehistory():any;
        pauseconfig():any;
        cardPileButton():any;
        chat():any;
        volumn():any;
        volumn_background(e):any;
        volumn_audio(e):any;
        hoverpopped():any;
        hoverpopped_leave():any;
        leavehoverpopped():any;
        dierevive():any;
        dieswap():any;
        dieswap2():any;
        touchconfirm():any;
        windowtouchstart(e):any;
        windowtouchmove(e):any;
        windowtouchend(e):any;
        checkroundtranslate(translate):any;
        checkdialogtranslate(translate,dialog):any;
        windowmousewheel(e):any;
        windowmousemove(e):any;
        windowmousedown(e):any;
        cardtouchstart(e):any;
        cardtouchmove(e):any;
        windowmouseup(e):any;
        mousemove():any;
        mouseenter():any;
        mouseleave():any;
        mousedown():any;
        mouseentercancel():any;
        hoverplayer(e):any;
        longpressdown(e):any;
        longpresscallback():any;
        longpresscancel():any;
        window():any;
        toggle():any;
        editor():any;
        switcher():any;
        choice():any;
        button():any;
        touchintro():any;
        card():any;
        avatar():any;
        avatar2():any;
        player():any;
        target(e):any;
        control2():any;
        control():any;
        dialogcontrol():any;
        skill(skill):any;
        ok(node):any;
        cancel(node):any;
        logv(e):any;
        logvleave():any;
        charactercard(name,sourcenode,noedit,resume,avatar):any;
        intro(e):any;
        intro2():any;
        auto():any;
        wuxie():any;
        tempnowuxie():any;
        pause():any;
        resume(e):any;
        config():any;
        swap():any;
        mousewheel(evt):any;
        touchStart(e):any;
        dialogtouchStart(e):any;
        touchScroll(e):any;
        autoskill(bool,node):any;
        skillbutton():any;
        autoskill2(e):any;
        rightplayer(e):any;
        right(e):any;
    },
    selected:{
        buttons:[],cards:[],targets:[]
    },
    clear():any;
    updatec():any;
    updatex():any;
    updatexr():any;
    updatejm(player,nodes,start,inv):any;
    updatem(player):any;
    updatej(player):any;
    updatehl():any;
    updateh(compute):any;
    updatehx(node):any;
    updated():any;
    updatez():any;
    update():any;
    recycle(node,key):any;
}