declare var get:Get;
interface Get {
    infoHp(hp):any;
    infoMaxHp(hp):any;
    is:{
        converted(event):any;
        safari():any;
        freePosition(cards):any;
        nomenu(name,item):any;
        altered(skill):any;
        node(obj):any;
        div(obj):any;
        map(obj):any;
        set(obj):any;
        object(obj):any;
        singleSelect(func):any;
        jun(name):any;
        versus():any;
        mobileMe(player):any;
        newLayout():any;
        phoneLayout():any;
        singleHandcard():any;
        linked2(player):any;
        empty(obj):any;
        pos(str):any;
        locked(skill):any;
    },
    bottomCards(num):any;
    discarded():any;
    cardOffset():any;
    colorspan(str):any;
    evtprompt(next,str):any;
    autoViewAs(card,cards):any;
    max(list,func,type):any;
    min(list,func,type):any;
    character(name,num):any;
    characterIntro(name):any;
    groupnature(group,method):any;
    sgn(num):any;
    rand(num,num2):any;
    sort(arr,method):any;
    sortSeat(arr,target):any;
    zip(callback):any;
    delayx(num,max):any;
    prompt(skill,target,player):any;
    prompt2(skill,target,player):any;
    url(master):any;
    round(num,f):any;
    playerNumber():any;
    benchmark(func1,func2,iteration,arg):any;
    stringify(obj,level):any;
    copy(obj):any;
    inpilefull(type):any;
    inpile(type,filter):any;
    inpile2(type):any;
    typeCard(type,filter):any;
    libCard(filter):any;
    ip():any;
    modetrans(config,server):any;
    charactersOL(func):any;
    trimip(str):any;
    mode():any;
    idDialog(id):any;
    arenaState():any;
    skillState(player):any;
    id():any;
    zhu(player,skill,unseen):any;
    config(item,mode):any;
    coinCoeff(list):any;
    rank(name,num):any;
    skillRank(skill,type,grouped):any;
    targetsInfo(targets):any;
    infoTargets(info):any;
    cardInfo(card):any;
    cardsInfo(cards):any;
    infoCard(info):any;
    infoCards(info):any;
    cardInfoOL(card):any;
    infoCardOL(info):any;
    cardsInfoOL(cards):any;
    infoCardsOL(info):any;
    playerInfoOL(player):any;
    infoPlayerOL(info):any;
    playersInfoOL(players):any;
    infoPlayersOL(info):any;
    funcInfoOL(func):any;
    infoFuncOL(info):any;
    stringifiedResult(item,level):any;
    parsedResult(item):any;
    verticalStr(str,sp):any;
    numStr(num,method):any;
    rawName(str):any;
    rawName2(str):any;
    slimName(str):any;
    time():any;
    utc():any;
    evtDistance(e1,e2):any;
    xyDistance(from,to):any;
    itemtype(obj):any;
    equipNum(card):any;
    objtype(obj):any;
    type(obj,method):any;
    type2(card):any;
    subtype(obj):any;
    equiptype(card):any;
    suit(card):any;
    color(card):any;
    number(card):any;
    nature(card):any;
    cards(num):any;
    judge(card):any;
    distance(from,to,method):any;
    info(item):any;
    select(select):any;
    card(original):any;
    player():any;
    players(sort,dead,out):any;
    position(card):any;
    skillTranslation(str,player):any;
    skillInfoTranslation(name):any;
    translation(str,arg):any;
    cnNumber(num,two):any;
    selectableButtons(sort):any;
    selectableCards(sort):any;
    skills():any;
    gainableSkills(func,player):any;
    gainableSkillsName(name, func):any;
    gainableCharacters(func):any;
    selectableTargets(sort):any;
    filter(filter,i):any;
    cardCount(card,player):any;
    skillCount(skill,player):any;
    owner(card,method):any;
    noSelected():any;
    population(identity):any;
    totalPopulation(identity):any;
    tag(item,tag,item2):any;
    sortCard(sort):any;
    difficulty():any;
    cardPile(name,create):any;
    cardPile2(name):any;
    discardPile(name):any;
    aiStrategy():any;
    skillintro(name,learn,learn2):any;
    intro(name):any;
    storageintro(type,content,player,dialog,skill):any;
    nodeintro(node,simple,evt):any;
    linkintro(dialog,content,player):any;
    groups():any;
    types():any;
    links(buttons):any;
    threaten(target,player,hp):any;
    condition(player):any;
    attitude(from,to):any;
    sgnAttitude():any;
    useful(card):any;
    unuseful(card):any;
    unuseful2(card):any;
    unuseful3(card):any;
    value(card,player,method):any;
    equipResult(player,target,name):any;
    equipValue(card,player):any;
    equipValueNumber(card):any;
    disvalue(card,player):any;
    disvalue2(card,player):any;
    skillthreaten(skill,player,target):any;
    order(item):any;
    result(item,skill):any;
    effect(target,card,player,player2):any;
    damageEffect(target,player,viewer,nature):any;
    recoverEffect(target,player,viewer):any;
    buttonValue(button):any;
    attitude2(to):any;
}